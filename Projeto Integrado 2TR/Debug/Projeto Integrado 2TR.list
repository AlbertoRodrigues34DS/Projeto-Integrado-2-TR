
Projeto Integrado 2TR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016c0  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005164  08005164  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005164  08005164  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005164  08005164  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000094  08005200  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08005200  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007353  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001672  00000000  00000000  00027410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00028a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016dfd  00000000  00000000  00029198  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000063e7  00000000  00000000  0003ff95  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008178d  00000000  00000000  0004637c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c7b09  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000658  00000000  00000000  000c7b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001e9c  00000000  00000000  000c81e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a8c 	.word	0x08003a8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08003a8c 	.word	0x08003a8c

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f002 f9a8 	bl	80024aa <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f002 f99c 	bl	80024aa <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f002 f990 	bl	80024aa <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f001 ff16 	bl	8001fbc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f002 f988 	bl	80024aa <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f002 f979 	bl	80024aa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f002 fdf9 	bl	8002db8 <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	20000154 	.word	0x20000154

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f002 f95f 	bl	80024aa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f002 fdde 	bl	8002db8 <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	20000154 	.word	0x20000154

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f001 fe99 	bl	8001fbc <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	080050a8 	.word	0x080050a8
 8000340:	080050e4 	.word	0x080050e4
 8000344:	080050f4 	.word	0x080050f4

08000348 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d823      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b4f      	cmp	r3, #79	; 0x4f
 8000364:	d820      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000366:	f7ff fef1 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	b2d8      	uxtb	r0, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f7ff ff8b 	bl	800029c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2102      	movs	r1, #2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff1b 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 80003a2:	f7ff fedf 	bl	8000164 <ST7735_Unselect>
 80003a6:	e000      	b.n	80003aa <ST7735_DrawPixel+0x62>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003b0:	b082      	sub	sp, #8
 80003b2:	b590      	push	{r4, r7, lr}
 80003b4:	b089      	sub	sp, #36	; 0x24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	460b      	mov	r3, r1
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	b2d8      	uxtb	r0, r3
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003d6:	4413      	add	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2dc      	uxtb	r4, r3
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003e6:	4413      	add	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4622      	mov	r2, r4
 80003f0:	f7ff ff54 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	e043      	b.n	8000482 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80003fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	3b20      	subs	r3, #32
 8000400:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000404:	fb01 f303 	mul.w	r3, r1, r3
 8000408:	4619      	mov	r1, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	4413      	add	r3, r2
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
 800041a:	e029      	b.n	8000470 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00e      	beq.n	800044a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800042c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	743b      	strb	r3, [r7, #16]
 8000436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000438:	b2db      	uxtb	r3, r3
 800043a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fec8 	bl	80001d8 <ST7735_WriteData>
 8000448:	e00f      	b.n	800046a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	733b      	strb	r3, [r7, #12]
 8000456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800045a:	b2db      	uxtb	r3, r3
 800045c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2102      	movs	r1, #2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feb7 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3301      	adds	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4293      	cmp	r3, r2
 800047a:	d3cf      	bcc.n	800041c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	3301      	adds	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
 8000482:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000486:	461a      	mov	r2, r3
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	4293      	cmp	r3, r2
 800048c:	d3b5      	bcc.n	80003fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800048e:	bf00      	nop
 8000490:	3724      	adds	r7, #36	; 0x24
 8000492:	46bd      	mov	sp, r7
 8000494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr

0800049c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800049c:	b082      	sub	sp, #8
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af04      	add	r7, sp, #16
 80004a4:	603a      	str	r2, [r7, #0]
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	4603      	mov	r3, r0
 80004aa:	80fb      	strh	r3, [r7, #6]
 80004ac:	460b      	mov	r3, r1
 80004ae:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80004b0:	f7ff fe4c 	bl	800014c <ST7735_Select>

    while(*str) {
 80004b4:	e02d      	b.n	8000512 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	7d3a      	ldrb	r2, [r7, #20]
 80004ba:	4413      	add	r3, r2
 80004bc:	2b9f      	cmp	r3, #159	; 0x9f
 80004be:	dd13      	ble.n	80004e8 <ST7735_WriteString+0x4c>
            x = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80004c4:	7d7b      	ldrb	r3, [r7, #21]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80004ce:	88bb      	ldrh	r3, [r7, #4]
 80004d0:	7d7a      	ldrb	r2, [r7, #21]
 80004d2:	4413      	add	r3, r2
 80004d4:	2b4f      	cmp	r3, #79	; 0x4f
 80004d6:	dc21      	bgt.n	800051c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d103      	bne.n	80004e8 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
                continue;
 80004e6:	e014      	b.n	8000512 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	88b9      	ldrh	r1, [r7, #4]
 80004ee:	88f8      	ldrh	r0, [r7, #6]
 80004f0:	8c3b      	ldrh	r3, [r7, #32]
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	8bbb      	ldrh	r3, [r7, #28]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f7ff ff57 	bl	80003b0 <ST7735_WriteChar>
        x += font.width;
 8000502:	7d3b      	ldrb	r3, [r7, #20]
 8000504:	b29a      	uxth	r2, r3
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	4413      	add	r3, r2
 800050a:	80fb      	strh	r3, [r7, #6]
        str++;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1cd      	bne.n	80004b6 <ST7735_WriteString+0x1a>
 800051a:	e000      	b.n	800051e <ST7735_WriteString+0x82>
                break;
 800051c:	bf00      	nop
    }

    ST7735_Unselect();
 800051e:	f7ff fe21 	bl	8000164 <ST7735_Unselect>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800052c:	b002      	add	sp, #8
 800052e:	4770      	bx	lr

08000530 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	80fb      	strh	r3, [r7, #6]
 8000542:	4603      	mov	r3, r0
 8000544:	80bb      	strh	r3, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b9f      	cmp	r3, #159	; 0x9f
 8000552:	d859      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	2b4f      	cmp	r3, #79	; 0x4f
 8000558:	d856      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	4413      	add	r3, r2
 8000560:	3b01      	subs	r3, #1
 8000562:	2b9f      	cmp	r3, #159	; 0x9f
 8000564:	dd03      	ble.n	800056e <ST7735_FillRectangle+0x3e>
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800056c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800056e:	88ba      	ldrh	r2, [r7, #4]
 8000570:	883b      	ldrh	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	3b01      	subs	r3, #1
 8000576:	2b4f      	cmp	r3, #79	; 0x4f
 8000578:	dd03      	ble.n	8000582 <ST7735_FillRectangle+0x52>
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000580:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000582:	f7ff fde3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3b01      	subs	r3, #1
 800059c:	b2dc      	uxtb	r4, r3
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4622      	mov	r2, r4
 80005b0:	f7ff fe74 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005b4:	8c3b      	ldrh	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	8c3b      	ldrh	r3, [r7, #32]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <ST7735_FillRectangle+0xe0>)
 80005ca:	f001 ff6e 	bl	80024aa <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80005ce:	883b      	ldrh	r3, [r7, #0]
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	e013      	b.n	80005fc <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	e00a      	b.n	80005f0 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80005da:	f107 010c 	add.w	r1, r7, #12
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2202      	movs	r2, #2
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <ST7735_FillRectangle+0xe4>)
 80005e6:	f002 fbe7 	bl	8002db8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f1      	bne.n	80005da <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8000602:	f7ff fdaf 	bl	8000164 <ST7735_Unselect>
 8000606:	e000      	b.n	800060a <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000608:	bf00      	nop
}
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	20000154 	.word	0x20000154

08000618 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	4604      	mov	r4, r0
 8000620:	4608      	mov	r0, r1
 8000622:	4611      	mov	r1, r2
 8000624:	461a      	mov	r2, r3
 8000626:	4623      	mov	r3, r4
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	4603      	mov	r3, r0
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	807b      	strh	r3, [r7, #2]
 8000632:	4613      	mov	r3, r2
 8000634:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	2b9f      	cmp	r3, #159	; 0x9f
 800063a:	d86b      	bhi.n	8000714 <ST7735_FillRectangleFast+0xfc>
 800063c:	88bb      	ldrh	r3, [r7, #4]
 800063e:	2b4f      	cmp	r3, #79	; 0x4f
 8000640:	d868      	bhi.n	8000714 <ST7735_FillRectangleFast+0xfc>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	4413      	add	r3, r2
 8000648:	3b01      	subs	r3, #1
 800064a:	2b9f      	cmp	r3, #159	; 0x9f
 800064c:	dd03      	ble.n	8000656 <ST7735_FillRectangleFast+0x3e>
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000654:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000656:	88ba      	ldrh	r2, [r7, #4]
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	4413      	add	r3, r2
 800065c:	3b01      	subs	r3, #1
 800065e:	2b4f      	cmp	r3, #79	; 0x4f
 8000660:	dd03      	ble.n	800066a <ST7735_FillRectangleFast+0x52>
 8000662:	88bb      	ldrh	r3, [r7, #4]
 8000664:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000668:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800066a:	f7ff fd6f 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2d8      	uxtb	r0, r3
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	b2d9      	uxtb	r1, r3
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	3b01      	subs	r3, #1
 8000684:	b2dc      	uxtb	r4, r3
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	883b      	ldrh	r3, [r7, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2db      	uxtb	r3, r3
 8000692:	3b01      	subs	r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4622      	mov	r2, r4
 8000698:	f7ff fe00 	bl	800029c <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 800069c:	8c3b      	ldrh	r3, [r7, #32]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	723b      	strb	r3, [r7, #8]
 80006a6:	8c3b      	ldrh	r3, [r7, #32]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fd8d 	bl	80031d0 <malloc>
 80006b6:	4603      	mov	r3, r0
 80006b8:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80006ba:	2300      	movs	r3, #0
 80006bc:	80fb      	strh	r3, [r7, #6]
 80006be:	e008      	b.n	80006d2 <ST7735_FillRectangleFast+0xba>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	893a      	ldrh	r2, [r7, #8]
 80006ca:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	3301      	adds	r3, #1
 80006d0:	80fb      	strh	r3, [r7, #6]
 80006d2:	88fa      	ldrh	r2, [r7, #6]
 80006d4:	887b      	ldrh	r3, [r7, #2]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3f2      	bcc.n	80006c0 <ST7735_FillRectangleFast+0xa8>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	480f      	ldr	r0, [pc, #60]	; (800071c <ST7735_FillRectangleFast+0x104>)
 80006e0:	f001 fee3 	bl	80024aa <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80006e4:	883b      	ldrh	r3, [r7, #0]
 80006e6:	80bb      	strh	r3, [r7, #4]
 80006e8:	e00b      	b.n	8000702 <ST7735_FillRectangleFast+0xea>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	68f9      	ldr	r1, [r7, #12]
 80006f6:	480a      	ldr	r0, [pc, #40]	; (8000720 <ST7735_FillRectangleFast+0x108>)
 80006f8:	f002 fb5e 	bl	8002db8 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	80bb      	strh	r3, [r7, #4]
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f0      	bne.n	80006ea <ST7735_FillRectangleFast+0xd2>

    free(line);
 8000708:	68f8      	ldr	r0, [r7, #12]
 800070a:	f002 fd69 	bl	80031e0 <free>
    ST7735_Unselect();
 800070e:	f7ff fd29 	bl	8000164 <ST7735_Unselect>
 8000712:	e000      	b.n	8000716 <ST7735_FillRectangleFast+0xfe>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000714:	bf00      	nop
}
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40010c00 	.word	0x40010c00
 8000720:	20000154 	.word	0x20000154

08000724 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af02      	add	r7, sp, #8
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2350      	movs	r3, #80	; 0x50
 8000734:	22a0      	movs	r2, #160	; 0xa0
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fef9 	bl	8000530 <ST7735_FillRectangle>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af02      	add	r7, sp, #8
 800074c:	4603      	mov	r3, r0
 800074e:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2350      	movs	r3, #80	; 0x50
 8000756:	22a0      	movs	r2, #160	; 0xa0
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ff5c 	bl	8000618 <ST7735_FillRectangleFast>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <ST7735_DrawLine>:
	ST7735_WriteCommand(ST7735_GAMSET);
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
	ST7735_Unselect();
}

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color){
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	4604      	mov	r4, r0
 8000770:	4608      	mov	r0, r1
 8000772:	4611      	mov	r1, r2
 8000774:	461a      	mov	r2, r3
 8000776:	4623      	mov	r3, r4
 8000778:	80fb      	strh	r3, [r7, #6]
 800077a:	4603      	mov	r3, r0
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
 8000782:	4613      	mov	r3, r2
 8000784:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
	    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000786:	883a      	ldrh	r2, [r7, #0]
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000790:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000794:	8879      	ldrh	r1, [r7, #2]
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	1acb      	subs	r3, r1, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	bfb8      	it	lt
 800079e:	425b      	neglt	r3, r3
 80007a0:	429a      	cmp	r2, r3
 80007a2:	bfcc      	ite	gt
 80007a4:	2301      	movgt	r3, #1
 80007a6:	2300      	movle	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	827b      	strh	r3, [r7, #18]
	    if (steep) {
 80007ac:	8a7b      	ldrh	r3, [r7, #18]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d00b      	beq.n	80007ca <ST7735_DrawLine+0x62>
			swap = x0;
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	823b      	strh	r3, [r7, #16]
			x0 = y0;
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	80fb      	strh	r3, [r7, #6]
			y0 = swap;
 80007ba:	8a3b      	ldrh	r3, [r7, #16]
 80007bc:	80bb      	strh	r3, [r7, #4]

			swap = x1;
 80007be:	887b      	ldrh	r3, [r7, #2]
 80007c0:	823b      	strh	r3, [r7, #16]
			x1 = y1;
 80007c2:	883b      	ldrh	r3, [r7, #0]
 80007c4:	807b      	strh	r3, [r7, #2]
			y1 = swap;
 80007c6:	8a3b      	ldrh	r3, [r7, #16]
 80007c8:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, y0);
	        //_swap_int16_t(x1, y1);
	    }

	    if (x0 > x1) {
 80007ca:	88fa      	ldrh	r2, [r7, #6]
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d90b      	bls.n	80007ea <ST7735_DrawLine+0x82>
			swap = x0;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	823b      	strh	r3, [r7, #16]
			x0 = x1;
 80007d6:	887b      	ldrh	r3, [r7, #2]
 80007d8:	80fb      	strh	r3, [r7, #6]
			x1 = swap;
 80007da:	8a3b      	ldrh	r3, [r7, #16]
 80007dc:	807b      	strh	r3, [r7, #2]

			swap = y0;
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	823b      	strh	r3, [r7, #16]
			y0 = y1;
 80007e2:	883b      	ldrh	r3, [r7, #0]
 80007e4:	80bb      	strh	r3, [r7, #4]
			y1 = swap;
 80007e6:	8a3b      	ldrh	r3, [r7, #16]
 80007e8:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, x1);
	        //_swap_int16_t(y0, y1);
	    }

	    int16_t dx, dy;
	    dx = x1 - x0;
 80007ea:	887a      	ldrh	r2, [r7, #2]
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	81fb      	strh	r3, [r7, #14]
	    dy = ABS(y1 - y0);
 80007f4:	883a      	ldrh	r2, [r7, #0]
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bfb8      	it	lt
 80007fe:	425b      	neglt	r3, r3
 8000800:	81bb      	strh	r3, [r7, #12]

	    int16_t err = dx / 2;
 8000802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000806:	0fda      	lsrs	r2, r3, #31
 8000808:	4413      	add	r3, r2
 800080a:	105b      	asrs	r3, r3, #1
 800080c:	82fb      	strh	r3, [r7, #22]
	    int16_t ystep;

	    if (y0 < y1) {
 800080e:	88ba      	ldrh	r2, [r7, #4]
 8000810:	883b      	ldrh	r3, [r7, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d202      	bcs.n	800081c <ST7735_DrawLine+0xb4>
	        ystep = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	82bb      	strh	r3, [r7, #20]
 800081a:	e028      	b.n	800086e <ST7735_DrawLine+0x106>
	    } else {
	        ystep = -1;
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	82bb      	strh	r3, [r7, #20]
	    }

	    for (; x0<=x1; x0++) {
 8000822:	e024      	b.n	800086e <ST7735_DrawLine+0x106>
	        if (steep) {
 8000824:	8a7b      	ldrh	r3, [r7, #18]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <ST7735_DrawLine+0xd0>
	            ST7735_DrawPixel(y0, x0, color);
 800082a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800082c:	88f9      	ldrh	r1, [r7, #6]
 800082e:	88bb      	ldrh	r3, [r7, #4]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <ST7735_DrawPixel>
 8000836:	e005      	b.n	8000844 <ST7735_DrawLine+0xdc>
	        } else {
	        	ST7735_DrawPixel(x0, y0, color);
 8000838:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800083a:	88b9      	ldrh	r1, [r7, #4]
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fd82 	bl	8000348 <ST7735_DrawPixel>
	        }
	        err -= dy;
 8000844:	8afa      	ldrh	r2, [r7, #22]
 8000846:	89bb      	ldrh	r3, [r7, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	b29b      	uxth	r3, r3
 800084c:	82fb      	strh	r3, [r7, #22]
	        if (err < 0) {
 800084e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da08      	bge.n	8000868 <ST7735_DrawLine+0x100>
	            y0 += ystep;
 8000856:	8aba      	ldrh	r2, [r7, #20]
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	80bb      	strh	r3, [r7, #4]
	            err += dx;
 800085e:	8afa      	ldrh	r2, [r7, #22]
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	82fb      	strh	r3, [r7, #22]
	    for (; x0<=x1; x0++) {
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	3301      	adds	r3, #1
 800086c:	80fb      	strh	r3, [r7, #6]
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	429a      	cmp	r2, r3
 8000874:	d9d6      	bls.n	8000824 <ST7735_DrawLine+0xbc>
	        }
	    }
}
 8000876:	bf00      	nop
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd90      	pop	{r4, r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000884:	f001 fb38 	bl	8001ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000888:	f000 f818 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 f888 	bl	80009a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000890:	f000 f850 	bl	8000934 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000894:	f7ff fd3e 	bl	8000314 <ST7735_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // short cor=0;
	   Menu(cor,bomba);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <main+0x34>)
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <main+0x38>)
 800089e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4610      	mov	r0, r2
 80008a6:	f000 f8db 	bl	8000a60 <Menu>
	   ST7735_FillScreen(BLACK);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff3a 	bl	8000724 <ST7735_FillScreen>
	   while (1){
 80008b0:	e7fe      	b.n	80008b0 <main+0x30>
 80008b2:	bf00      	nop
 80008b4:	20000010 	.word	0x20000010
 80008b8:	20000012 	.word	0x20000012

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	; 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fc90 	bl	80031f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fdf2 	bl	80024dc <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008fe:	f001 f9f1 	bl	8001ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 f85e 	bl	80029dc <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000926:	f001 f9dd 	bl	8001ce4 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3740      	adds	r7, #64	; 0x40
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_SPI1_Init+0x64>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <MX_SPI1_Init+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_SPI1_Init+0x64>)
 8000940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_SPI1_Init+0x64>)
 8000960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_SPI1_Init+0x64>)
 8000968:	2220      	movs	r2, #32
 800096a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_SPI1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_SPI1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_SPI1_Init+0x64>)
 8000980:	220a      	movs	r2, #10
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_SPI1_Init+0x64>)
 8000986:	f002 f993 	bl	8002cb0 <HAL_SPI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000990:	f001 f9a8 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000154 	.word	0x20000154
 800099c:	40013000 	.word	0x40013000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <MX_GPIO_Init+0xb4>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_GPIO_Init+0xb8>)
 80009ea:	f001 fd5e 	bl	80024aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 80009ee:	2200      	movs	r2, #0
 80009f0:	217b      	movs	r1, #123	; 0x7b
 80009f2:	481a      	ldr	r0, [pc, #104]	; (8000a5c <MX_GPIO_Init+0xbc>)
 80009f4:	f001 fd59 	bl	80024aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 80009f8:	2310      	movs	r3, #16
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_GPIO_Init+0xb8>)
 8000a10:	f001 fbda 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000a14:	237b      	movs	r3, #123	; 0x7b
 8000a16:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2302      	movs	r3, #2
 8000a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_GPIO_Init+0xbc>)
 8000a2c:	f001 fbcc 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a30:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_GPIO_Init+0xb8>)
 8000a46:	f001 fbbf 	bl	80021c8 <HAL_GPIO_Init>

}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <Menu>:

/* USER CODE BEGIN 4 */
short Menu( uint16_t cor,short bomba){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
	ST7735_FillScreen(cor);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fe56 	bl	8000724 <ST7735_FillScreen>
	int escolha=0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
	ST7735_WriteString(posxtitulo, posytitulo,"Campo Minado",Font_11x18, BLACK, cor );
 8000a7c:	4b6b      	ldr	r3, [pc, #428]	; (8000c2c <Menu+0x1cc>)
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	b298      	uxth	r0, r3
 8000a84:	4b6a      	ldr	r3, [pc, #424]	; (8000c30 <Menu+0x1d0>)
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	4b69      	ldr	r3, [pc, #420]	; (8000c34 <Menu+0x1d4>)
 8000a8e:	88fa      	ldrh	r2, [r7, #6]
 8000a90:	9202      	str	r2, [sp, #8]
 8000a92:	2200      	movs	r2, #0
 8000a94:	9201      	str	r2, [sp, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a66      	ldr	r2, [pc, #408]	; (8000c38 <Menu+0x1d8>)
 8000a9e:	f7ff fcfd 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela,"P9-Jogar!",Font_7x10, BLACK, cor );
 8000aa2:	4b66      	ldr	r3, [pc, #408]	; (8000c3c <Menu+0x1dc>)
 8000aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa8:	b298      	uxth	r0, r3
 8000aaa:	4b65      	ldr	r3, [pc, #404]	; (8000c40 <Menu+0x1e0>)
 8000aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <Menu+0x1e4>)
 8000ab4:	88fa      	ldrh	r2, [r7, #6]
 8000ab6:	9202      	str	r2, [sp, #8]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	9201      	str	r2, [sp, #4]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	9200      	str	r2, [sp, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a61      	ldr	r2, [pc, #388]	; (8000c48 <Menu+0x1e8>)
 8000ac4:	f7ff fcea 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela3,"P10-Dificuldade:",Font_7x10, BLACK, cor );
 8000ac8:	4b5c      	ldr	r3, [pc, #368]	; (8000c3c <Menu+0x1dc>)
 8000aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ace:	b298      	uxth	r0, r3
 8000ad0:	4b5e      	ldr	r3, [pc, #376]	; (8000c4c <Menu+0x1ec>)
 8000ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <Menu+0x1e4>)
 8000ada:	88fa      	ldrh	r2, [r7, #6]
 8000adc:	9202      	str	r2, [sp, #8]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	9201      	str	r2, [sp, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	9200      	str	r2, [sp, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <Menu+0x1f0>)
 8000aea:	f7ff fcd7 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela4,"P11-Cores:",Font_7x10, BLACK, cor );
 8000aee:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <Menu+0x1dc>)
 8000af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af4:	b298      	uxth	r0, r3
 8000af6:	4b57      	ldr	r3, [pc, #348]	; (8000c54 <Menu+0x1f4>)
 8000af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afc:	b299      	uxth	r1, r3
 8000afe:	4b51      	ldr	r3, [pc, #324]	; (8000c44 <Menu+0x1e4>)
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	9202      	str	r2, [sp, #8]
 8000b04:	2200      	movs	r2, #0
 8000b06:	9201      	str	r2, [sp, #4]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a52      	ldr	r2, [pc, #328]	; (8000c58 <Menu+0x1f8>)
 8000b10:	f7ff fcc4 	bl	800049c <ST7735_WriteString>


	while(escolha==0){
 8000b14:	e067      	b.n	8000be6 <Menu+0x186>
    	if (BOTAO9 == 0 && BOTAO10 == 1 && BOTAO11 == 1 && BOTAO12 == 1) {
 8000b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1a:	4850      	ldr	r0, [pc, #320]	; (8000c5c <Menu+0x1fc>)
 8000b1c:	f001 fcae 	bl	800247c <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d11a      	bne.n	8000b5c <Menu+0xfc>
 8000b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2a:	484c      	ldr	r0, [pc, #304]	; (8000c5c <Menu+0x1fc>)
 8000b2c:	f001 fca6 	bl	800247c <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d112      	bne.n	8000b5c <Menu+0xfc>
 8000b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3a:	4848      	ldr	r0, [pc, #288]	; (8000c5c <Menu+0x1fc>)
 8000b3c:	f001 fc9e 	bl	800247c <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d10a      	bne.n	8000b5c <Menu+0xfc>
 8000b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4a:	4844      	ldr	r0, [pc, #272]	; (8000c5c <Menu+0x1fc>)
 8000b4c:	f001 fc96 	bl	800247c <HAL_GPIO_ReadPin>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d102      	bne.n	8000b5c <Menu+0xfc>
    	escolha=1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e044      	b.n	8000be6 <Menu+0x186>
    	}
    	else if (BOTAO9 == 1 && BOTAO10 == 0 && BOTAO11 == 1 && BOTAO12 == 1) {
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	483e      	ldr	r0, [pc, #248]	; (8000c5c <Menu+0x1fc>)
 8000b62:	f001 fc8b 	bl	800247c <HAL_GPIO_ReadPin>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d11a      	bne.n	8000ba2 <Menu+0x142>
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	483a      	ldr	r0, [pc, #232]	; (8000c5c <Menu+0x1fc>)
 8000b72:	f001 fc83 	bl	800247c <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d112      	bne.n	8000ba2 <Menu+0x142>
 8000b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b80:	4836      	ldr	r0, [pc, #216]	; (8000c5c <Menu+0x1fc>)
 8000b82:	f001 fc7b 	bl	800247c <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d10a      	bne.n	8000ba2 <Menu+0x142>
 8000b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b90:	4832      	ldr	r0, [pc, #200]	; (8000c5c <Menu+0x1fc>)
 8000b92:	f001 fc73 	bl	800247c <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d102      	bne.n	8000ba2 <Menu+0x142>
    	    	    escolha=2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e021      	b.n	8000be6 <Menu+0x186>
    	    	  }

	else if (BOTAO9 == 1 && BOTAO10 == 1 && BOTAO11 == 0 && BOTAO12 == 1) {
 8000ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba6:	482d      	ldr	r0, [pc, #180]	; (8000c5c <Menu+0x1fc>)
 8000ba8:	f001 fc68 	bl	800247c <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d119      	bne.n	8000be6 <Menu+0x186>
 8000bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb6:	4829      	ldr	r0, [pc, #164]	; (8000c5c <Menu+0x1fc>)
 8000bb8:	f001 fc60 	bl	800247c <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d111      	bne.n	8000be6 <Menu+0x186>
 8000bc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc6:	4825      	ldr	r0, [pc, #148]	; (8000c5c <Menu+0x1fc>)
 8000bc8:	f001 fc58 	bl	800247c <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d109      	bne.n	8000be6 <Menu+0x186>
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	4821      	ldr	r0, [pc, #132]	; (8000c5c <Menu+0x1fc>)
 8000bd8:	f001 fc50 	bl	800247c <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d101      	bne.n	8000be6 <Menu+0x186>
	    	    	    escolha=3;
 8000be2:	2303      	movs	r3, #3
 8000be4:	60fb      	str	r3, [r7, #12]
	while(escolha==0){
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d094      	beq.n	8000b16 <Menu+0xb6>
	    	    	  }
		}

	switch (escolha) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d008      	beq.n	8000c04 <Menu+0x1a4>
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d00b      	beq.n	8000c0e <Menu+0x1ae>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d113      	bne.n	8000c22 <Menu+0x1c2>
			case 1:
		    Jogo(cor);
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f82f 	bl	8000c60 <Jogo>
			break;
 8000c02:	e00e      	b.n	8000c22 <Menu+0x1c2>

			case 2:
			DificuldadeLed(cor);
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fc90 	bl	800152c <DificuldadeLed>
			break;
 8000c0c:	e009      	b.n	8000c22 <Menu+0x1c2>

			case 3:
			MudarCor();
 8000c0e:	f000 f9fd 	bl	800100c <MudarCor>
			Menu(cor,bomba);
 8000c12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff20 	bl	8000a60 <Menu>
			break;
 8000c20:	bf00      	nop
		}


	}
 8000c22:	bf00      	nop
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000014 	.word	0x20000014
 8000c30:	200000b0 	.word	0x200000b0
 8000c34:	20000008 	.word	0x20000008
 8000c38:	08003aa4 	.word	0x08003aa4
 8000c3c:	20000016 	.word	0x20000016
 8000c40:	20000018 	.word	0x20000018
 8000c44:	20000000 	.word	0x20000000
 8000c48:	08003ab4 	.word	0x08003ab4
 8000c4c:	2000001c 	.word	0x2000001c
 8000c50:	08003ac0 	.word	0x08003ac0
 8000c54:	2000001e 	.word	0x2000001e
 8000c58:	08003ad4 	.word	0x08003ad4
 8000c5c:	40010800 	.word	0x40010800

08000c60 <Jogo>:

short Jogo(uint16_t cor){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af04      	add	r7, sp, #16
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]

	distribuirBombas(bomba);
 8000c6a:	4b90      	ldr	r3, [pc, #576]	; (8000eac <Jogo+0x24c>)
 8000c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 ffef 	bl	8001c54 <distribuirBombas>
	int verificarbotao=0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
	ST7735_FillScreen(cor);
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd51 	bl	8000724 <ST7735_FillScreen>
	ST7735_WriteString(posxtitulo, posytitulo, "Jogabilidade",Font_11x18, BLACK, cor );
 8000c82:	4b8b      	ldr	r3, [pc, #556]	; (8000eb0 <Jogo+0x250>)
 8000c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c88:	b298      	uxth	r0, r3
 8000c8a:	4b8a      	ldr	r3, [pc, #552]	; (8000eb4 <Jogo+0x254>)
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	b299      	uxth	r1, r3
 8000c92:	4b89      	ldr	r3, [pc, #548]	; (8000eb8 <Jogo+0x258>)
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	9202      	str	r2, [sp, #8]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	9201      	str	r2, [sp, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	9200      	str	r2, [sp, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a86      	ldr	r2, [pc, #536]	; (8000ebc <Jogo+0x25c>)
 8000ca4:	f7ff fbfa 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(7, posytela, "P10- colocar Bandeiras",Font_7x10, BLACK, cor );
 8000ca8:	4b85      	ldr	r3, [pc, #532]	; (8000ec0 <Jogo+0x260>)
 8000caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cae:	b299      	uxth	r1, r3
 8000cb0:	4b84      	ldr	r3, [pc, #528]	; (8000ec4 <Jogo+0x264>)
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	9202      	str	r2, [sp, #8]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	9201      	str	r2, [sp, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	9200      	str	r2, [sp, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a81      	ldr	r2, [pc, #516]	; (8000ec8 <Jogo+0x268>)
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f7ff fbea 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(23, posytela3 + 10, "Pr. qualquer botao",Font_7x10, BLACK, cor );
 8000cc8:	4b80      	ldr	r3, [pc, #512]	; (8000ecc <Jogo+0x26c>)
 8000cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	330a      	adds	r3, #10
 8000cd2:	b299      	uxth	r1, r3
 8000cd4:	4b7b      	ldr	r3, [pc, #492]	; (8000ec4 <Jogo+0x264>)
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	9202      	str	r2, [sp, #8]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	9201      	str	r2, [sp, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a7a      	ldr	r2, [pc, #488]	; (8000ed0 <Jogo+0x270>)
 8000ce6:	2017      	movs	r0, #23
 8000ce8:	f7ff fbd8 	bl	800049c <ST7735_WriteString>
	while (BOTAO9!=0 && BOTAO10!=0 && BOTAO11!=0 && BOTAO12!=0) {
 8000cec:	bf00      	nop
 8000cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf2:	4878      	ldr	r0, [pc, #480]	; (8000ed4 <Jogo+0x274>)
 8000cf4:	f001 fbc2 	bl	800247c <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d017      	beq.n	8000d2e <Jogo+0xce>
 8000cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d02:	4874      	ldr	r0, [pc, #464]	; (8000ed4 <Jogo+0x274>)
 8000d04:	f001 fbba 	bl	800247c <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00f      	beq.n	8000d2e <Jogo+0xce>
 8000d0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d12:	4870      	ldr	r0, [pc, #448]	; (8000ed4 <Jogo+0x274>)
 8000d14:	f001 fbb2 	bl	800247c <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d007      	beq.n	8000d2e <Jogo+0xce>
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	486c      	ldr	r0, [pc, #432]	; (8000ed4 <Jogo+0x274>)
 8000d24:	f001 fbaa 	bl	800247c <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1df      	bne.n	8000cee <Jogo+0x8e>
	}
	ST7735_FillScreen(cor);
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fcf7 	bl	8000724 <ST7735_FillScreen>
	ST7735_FillRectangleFast(0, 0, 80, 80, WHITE);
 8000d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2350      	movs	r3, #80	; 0x50
 8000d3e:	2250      	movs	r2, #80	; 0x50
 8000d40:	2100      	movs	r1, #0
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fc68 	bl	8000618 <ST7735_FillRectangleFast>
	ST7735_WriteString(90, posytela2, "Bandeiras",Font_7x10, BLACK, cor );
 8000d48:	4b63      	ldr	r3, [pc, #396]	; (8000ed8 <Jogo+0x278>)
 8000d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <Jogo+0x264>)
 8000d52:	88fa      	ldrh	r2, [r7, #6]
 8000d54:	9202      	str	r2, [sp, #8]
 8000d56:	2200      	movs	r2, #0
 8000d58:	9201      	str	r2, [sp, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	9200      	str	r2, [sp, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a5e      	ldr	r2, [pc, #376]	; (8000edc <Jogo+0x27c>)
 8000d62:	205a      	movs	r0, #90	; 0x5a
 8000d64:	f7ff fb9a 	bl	800049c <ST7735_WriteString>
	atualizarBandeiras();
 8000d68:	f000 fe56 	bl	8001a18 <atualizarBandeiras>
	for (i = 0; i <= 8; i++) {
 8000d6c:	4b5c      	ldr	r3, [pc, #368]	; (8000ee0 <Jogo+0x280>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e031      	b.n	8000dd8 <Jogo+0x178>
		ST7735_DrawLine((i*10), 0, (i*10), 80, BLACK);
 8000d74:	4b5a      	ldr	r3, [pc, #360]	; (8000ee0 <Jogo+0x280>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	b298      	uxth	r0, r3
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <Jogo+0x280>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2350      	movs	r3, #80	; 0x50
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f7ff fce4 	bl	8000768 <ST7735_DrawLine>
		ST7735_DrawLine(0, (i*10), 80, (i*10), BLACK);
 8000da0:	4b4f      	ldr	r3, [pc, #316]	; (8000ee0 <Jogo+0x280>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	b299      	uxth	r1, r3
 8000db0:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <Jogo+0x280>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	2250      	movs	r2, #80	; 0x50
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fccd 	bl	8000768 <ST7735_DrawLine>
	for (i = 0; i <= 8; i++) {
 8000dce:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <Jogo+0x280>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a42      	ldr	r2, [pc, #264]	; (8000ee0 <Jogo+0x280>)
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <Jogo+0x280>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	ddc9      	ble.n	8000d74 <Jogo+0x114>
	}
	ST7735_WriteString(2, 2, "X" , Font_7x10 , BLACK , WHITE);
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <Jogo+0x264>)
 8000de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de6:	9202      	str	r2, [sp, #8]
 8000de8:	2200      	movs	r2, #0
 8000dea:	9201      	str	r2, [sp, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a3c      	ldr	r2, [pc, #240]	; (8000ee4 <Jogo+0x284>)
 8000df4:	2102      	movs	r1, #2
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff fb50 	bl	800049c <ST7735_WriteString>
	//Tabuleiro: -1:Bomba; 0:Vazio n explorado; 1:Explorado; 2:Bandeira
	while (verificarbotao==0){
 8000dfc:	e0ef      	b.n	8000fde <Jogo+0x37e>
		if (BOTAO9==0) {
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	4834      	ldr	r0, [pc, #208]	; (8000ed4 <Jogo+0x274>)
 8000e04:	f001 fb3a 	bl	800247c <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d172      	bne.n	8000ef4 <Jogo+0x294>
			ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, " " , Font_7x10 , BLACK , WHITE);
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <Jogo+0x288>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3302      	adds	r3, #2
 8000e24:	b298      	uxth	r0, r3
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <Jogo+0x28c>)
 8000e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <Jogo+0x264>)
 8000e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e44:	9202      	str	r2, [sp, #8]
 8000e46:	2200      	movs	r2, #0
 8000e48:	9201      	str	r2, [sp, #4]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <Jogo+0x290>)
 8000e52:	f7ff fb23 	bl	800049c <ST7735_WriteString>
			consertaTabuleiro ();
 8000e56:	f000 fec1 	bl	8001bdc <consertaTabuleiro>
			cursorEsquerda();
 8000e5a:	f000 fe59 	bl	8001b10 <cursorEsquerda>
			ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, "X" , Font_7x10 , BLACK , WHITE);
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <Jogo+0x288>)
 8000e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3302      	adds	r3, #2
 8000e74:	b298      	uxth	r0, r3
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <Jogo+0x28c>)
 8000e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <Jogo+0x264>)
 8000e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	2200      	movs	r2, #0
 8000e98:	9201      	str	r2, [sp, #4]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	9200      	str	r2, [sp, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <Jogo+0x284>)
 8000ea2:	f7ff fafb 	bl	800049c <ST7735_WriteString>
			consertaTabuleiro ();
 8000ea6:	f000 fe99 	bl	8001bdc <consertaTabuleiro>
 8000eaa:	e098      	b.n	8000fde <Jogo+0x37e>
 8000eac:	20000012 	.word	0x20000012
 8000eb0:	20000014 	.word	0x20000014
 8000eb4:	200000b0 	.word	0x200000b0
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	08003ae0 	.word	0x08003ae0
 8000ec0:	20000018 	.word	0x20000018
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	08003af0 	.word	0x08003af0
 8000ecc:	2000001c 	.word	0x2000001c
 8000ed0:	08003b08 	.word	0x08003b08
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	2000001a 	.word	0x2000001a
 8000edc:	08003b1c 	.word	0x08003b1c
 8000ee0:	200000c4 	.word	0x200000c4
 8000ee4:	08003b28 	.word	0x08003b28
 8000ee8:	20000020 	.word	0x20000020
 8000eec:	20000022 	.word	0x20000022
 8000ef0:	08003b2c 	.word	0x08003b2c
		}
		else if (BOTAO11==0) {
 8000ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef8:	483d      	ldr	r0, [pc, #244]	; (8000ff0 <Jogo+0x390>)
 8000efa:	f001 fabf 	bl	800247c <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d14e      	bne.n	8000fa2 <Jogo+0x342>
			ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, " " , Font_7x10 , BLACK , WHITE);
 8000f04:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <Jogo+0x394>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3302      	adds	r3, #2
 8000f1a:	b298      	uxth	r0, r3
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <Jogo+0x398>)
 8000f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3302      	adds	r3, #2
 8000f32:	b299      	uxth	r1, r3
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <Jogo+0x39c>)
 8000f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3a:	9202      	str	r2, [sp, #8]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	9201      	str	r2, [sp, #4]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	9200      	str	r2, [sp, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a2e      	ldr	r2, [pc, #184]	; (8001000 <Jogo+0x3a0>)
 8000f48:	f7ff faa8 	bl	800049c <ST7735_WriteString>
			consertaTabuleiro ();
 8000f4c:	f000 fe46 	bl	8001bdc <consertaTabuleiro>
			cursorDireita();
 8000f50:	f000 fd88 	bl	8001a64 <cursorDireita>
			ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, "X" , Font_7x10 , BLACK , WHITE);
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <Jogo+0x394>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3302      	adds	r3, #2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <Jogo+0x398>)
 8000f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3302      	adds	r3, #2
 8000f82:	b299      	uxth	r1, r3
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <Jogo+0x39c>)
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	9202      	str	r2, [sp, #8]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	9200      	str	r2, [sp, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <Jogo+0x3a4>)
 8000f98:	f7ff fa80 	bl	800049c <ST7735_WriteString>
			consertaTabuleiro ();
 8000f9c:	f000 fe1e 	bl	8001bdc <consertaTabuleiro>
 8000fa0:	e01d      	b.n	8000fde <Jogo+0x37e>
		}
		else if (BOTAO12==0) {
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <Jogo+0x390>)
 8000fa8:	f001 fa68 	bl	800247c <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <Jogo+0x362>
			if (bomba > 0)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <Jogo+0x3a8>)
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd10      	ble.n	8000fde <Jogo+0x37e>
			Bandeira();
 8000fbc:	f000 fcac 	bl	8001918 <Bandeira>
 8000fc0:	e00d      	b.n	8000fde <Jogo+0x37e>
		}
		else if (BOTAO10==0) {
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <Jogo+0x390>)
 8000fc8:	f001 fa58 	bl	800247c <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <Jogo+0x37e>
			Descoberta();
 8000fd2:	f000 fbe5 	bl	80017a0 <Descoberta>
			HAL_Delay(700);
 8000fd6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fda:	f000 ffef 	bl	8001fbc <HAL_Delay>
	while (verificarbotao==0){
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f43f af0c 	beq.w	8000dfe <Jogo+0x19e>
		}

	}

}
 8000fe6:	bf00      	nop
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	20000020 	.word	0x20000020
 8000ff8:	20000022 	.word	0x20000022
 8000ffc:	20000000 	.word	0x20000000
 8001000:	08003b2c 	.word	0x08003b2c
 8001004:	08003b28 	.word	0x08003b28
 8001008:	20000012 	.word	0x20000012

0800100c <MudarCor>:
short MudarCor()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af04      	add	r7, sp, #16
	ST7735_FillScreen(cor);
 8001012:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <MudarCor+0x204>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fb84 	bl	8000724 <ST7735_FillScreen>
		short escolhacor=0;
 800101c:	2300      	movs	r3, #0
 800101e:	80fb      	strh	r3, [r7, #6]
		ST7735_WriteString(posxtitulo, posytitulo, "Tabela de cores",Font_7x10, BLACK, cor );
 8001020:	4b7c      	ldr	r3, [pc, #496]	; (8001214 <MudarCor+0x208>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	b298      	uxth	r0, r3
 8001028:	4b7b      	ldr	r3, [pc, #492]	; (8001218 <MudarCor+0x20c>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102e:	b299      	uxth	r1, r3
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <MudarCor+0x204>)
 8001032:	881a      	ldrh	r2, [r3, #0]
 8001034:	4b79      	ldr	r3, [pc, #484]	; (800121c <MudarCor+0x210>)
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	2200      	movs	r2, #0
 800103a:	9201      	str	r2, [sp, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a77      	ldr	r2, [pc, #476]	; (8001220 <MudarCor+0x214>)
 8001044:	f7ff fa2a 	bl	800049c <ST7735_WriteString>
		ST7735_WriteString(posxtela, posytela2, "P9-Verde",Font_7x10, BLACK, cor );
 8001048:	4b76      	ldr	r3, [pc, #472]	; (8001224 <MudarCor+0x218>)
 800104a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104e:	b298      	uxth	r0, r3
 8001050:	4b75      	ldr	r3, [pc, #468]	; (8001228 <MudarCor+0x21c>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	b299      	uxth	r1, r3
 8001058:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <MudarCor+0x204>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	4b6f      	ldr	r3, [pc, #444]	; (800121c <MudarCor+0x210>)
 800105e:	9202      	str	r2, [sp, #8]
 8001060:	2200      	movs	r2, #0
 8001062:	9201      	str	r2, [sp, #4]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	9200      	str	r2, [sp, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a70      	ldr	r2, [pc, #448]	; (800122c <MudarCor+0x220>)
 800106c:	f7ff fa16 	bl	800049c <ST7735_WriteString>
		ST7735_WriteString(posxtela, posytela, "PA10-Magenta",Font_7x10, BLACK, cor );
 8001070:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <MudarCor+0x218>)
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	b298      	uxth	r0, r3
 8001078:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <MudarCor+0x224>)
 800107a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107e:	b299      	uxth	r1, r3
 8001080:	4b63      	ldr	r3, [pc, #396]	; (8001210 <MudarCor+0x204>)
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	4b65      	ldr	r3, [pc, #404]	; (800121c <MudarCor+0x210>)
 8001086:	9202      	str	r2, [sp, #8]
 8001088:	2200      	movs	r2, #0
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a68      	ldr	r2, [pc, #416]	; (8001234 <MudarCor+0x228>)
 8001094:	f7ff fa02 	bl	800049c <ST7735_WriteString>
		ST7735_WriteString(posytela, posytela3, "P11-Azul",Font_7x10, BLACK, cor );
 8001098:	4b65      	ldr	r3, [pc, #404]	; (8001230 <MudarCor+0x224>)
 800109a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109e:	b298      	uxth	r0, r3
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <MudarCor+0x22c>)
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	4b59      	ldr	r3, [pc, #356]	; (8001210 <MudarCor+0x204>)
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	4b5b      	ldr	r3, [pc, #364]	; (800121c <MudarCor+0x210>)
 80010ae:	9202      	str	r2, [sp, #8]
 80010b0:	2200      	movs	r2, #0
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a60      	ldr	r2, [pc, #384]	; (800123c <MudarCor+0x230>)
 80010bc:	f7ff f9ee 	bl	800049c <ST7735_WriteString>
		ST7735_WriteString(posxtela, posytela4, "P12-Voltar",Font_7x10, BLACK, cor );
 80010c0:	4b58      	ldr	r3, [pc, #352]	; (8001224 <MudarCor+0x218>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	b298      	uxth	r0, r3
 80010c8:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <MudarCor+0x234>)
 80010ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ce:	b299      	uxth	r1, r3
 80010d0:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <MudarCor+0x204>)
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	4b51      	ldr	r3, [pc, #324]	; (800121c <MudarCor+0x210>)
 80010d6:	9202      	str	r2, [sp, #8]
 80010d8:	2200      	movs	r2, #0
 80010da:	9201      	str	r2, [sp, #4]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a58      	ldr	r2, [pc, #352]	; (8001244 <MudarCor+0x238>)
 80010e4:	f7ff f9da 	bl	800049c <ST7735_WriteString>

		while(escolhacor==0){
 80010e8:	e1f6      	b.n	80014d8 <MudarCor+0x4cc>


			if (BOTAO9 == 0 && BOTAO10 == 1 && BOTAO11 == 1 && BOTAO12 == 1) {
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	4856      	ldr	r0, [pc, #344]	; (8001248 <MudarCor+0x23c>)
 80010f0:	f001 f9c4 	bl	800247c <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 80a8 	bne.w	800124c <MudarCor+0x240>
 80010fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001100:	4851      	ldr	r0, [pc, #324]	; (8001248 <MudarCor+0x23c>)
 8001102:	f001 f9bb 	bl	800247c <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	f040 809f 	bne.w	800124c <MudarCor+0x240>
 800110e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001112:	484d      	ldr	r0, [pc, #308]	; (8001248 <MudarCor+0x23c>)
 8001114:	f001 f9b2 	bl	800247c <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	f040 8096 	bne.w	800124c <MudarCor+0x240>
 8001120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001124:	4848      	ldr	r0, [pc, #288]	; (8001248 <MudarCor+0x23c>)
 8001126:	f001 f9a9 	bl	800247c <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 808d 	bne.w	800124c <MudarCor+0x240>
				cor=GREEN;
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <MudarCor+0x204>)
 8001134:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001138:	801a      	strh	r2, [r3, #0]
				ST7735_FillScreenFast(cor);
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <MudarCor+0x204>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fb01 	bl	8000746 <ST7735_FillScreenFast>
				ST7735_WriteString(posxtitulo, posytitulo, "Tabela de cores",Font_7x10, BLACK, cor );
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <MudarCor+0x208>)
 8001146:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114a:	b298      	uxth	r0, r3
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <MudarCor+0x20c>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b299      	uxth	r1, r3
 8001154:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <MudarCor+0x204>)
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <MudarCor+0x210>)
 800115a:	9202      	str	r2, [sp, #8]
 800115c:	2200      	movs	r2, #0
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <MudarCor+0x214>)
 8001168:	f7ff f998 	bl	800049c <ST7735_WriteString>
				ST7735_WriteString(posxtela, posytela2, "P9-Verde",Font_7x10, BLACK, cor );
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MudarCor+0x218>)
 800116e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001172:	b298      	uxth	r0, r3
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <MudarCor+0x21c>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	b299      	uxth	r1, r3
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <MudarCor+0x204>)
 800117e:	881a      	ldrh	r2, [r3, #0]
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <MudarCor+0x210>)
 8001182:	9202      	str	r2, [sp, #8]
 8001184:	2200      	movs	r2, #0
 8001186:	9201      	str	r2, [sp, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <MudarCor+0x220>)
 8001190:	f7ff f984 	bl	800049c <ST7735_WriteString>
				ST7735_WriteString(posxtela, posytela, "PA10-Magenta",Font_7x10, BLACK, cor );
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MudarCor+0x218>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	b298      	uxth	r0, r3
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MudarCor+0x224>)
 800119e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a2:	b299      	uxth	r1, r3
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MudarCor+0x204>)
 80011a6:	881a      	ldrh	r2, [r3, #0]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MudarCor+0x210>)
 80011aa:	9202      	str	r2, [sp, #8]
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <MudarCor+0x228>)
 80011b8:	f7ff f970 	bl	800049c <ST7735_WriteString>
				ST7735_WriteString(posxtela, posytela3, "P11-Azul",Font_7x10, BLACK, cor );
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MudarCor+0x218>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	b298      	uxth	r0, r3
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MudarCor+0x22c>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	b299      	uxth	r1, r3
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MudarCor+0x204>)
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MudarCor+0x210>)
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	2200      	movs	r2, #0
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	9200      	str	r2, [sp, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <MudarCor+0x230>)
 80011e0:	f7ff f95c 	bl	800049c <ST7735_WriteString>
				ST7735_WriteString(posxtela, posytela4, "P12-Voltar",Font_7x10, BLACK, cor );
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MudarCor+0x218>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	b298      	uxth	r0, r3
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MudarCor+0x234>)
 80011ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f2:	b299      	uxth	r1, r3
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MudarCor+0x204>)
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <MudarCor+0x210>)
 80011fa:	9202      	str	r2, [sp, #8]
 80011fc:	2200      	movs	r2, #0
 80011fe:	9201      	str	r2, [sp, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MudarCor+0x238>)
 8001208:	f7ff f948 	bl	800049c <ST7735_WriteString>
 800120c:	e164      	b.n	80014d8 <MudarCor+0x4cc>
 800120e:	bf00      	nop
 8001210:	20000010 	.word	0x20000010
 8001214:	20000014 	.word	0x20000014
 8001218:	200000b0 	.word	0x200000b0
 800121c:	20000000 	.word	0x20000000
 8001220:	08003b30 	.word	0x08003b30
 8001224:	20000016 	.word	0x20000016
 8001228:	2000001a 	.word	0x2000001a
 800122c:	08003b40 	.word	0x08003b40
 8001230:	20000018 	.word	0x20000018
 8001234:	08003b4c 	.word	0x08003b4c
 8001238:	2000001c 	.word	0x2000001c
 800123c:	08003b5c 	.word	0x08003b5c
 8001240:	2000001e 	.word	0x2000001e
 8001244:	08003b68 	.word	0x08003b68
 8001248:	40010800 	.word	0x40010800

			    	}
			    	else if (BOTAO9 == 1 && BOTAO10 == 0 && BOTAO11 == 1 && BOTAO12 == 1) {
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	48a6      	ldr	r0, [pc, #664]	; (80014ec <MudarCor+0x4e0>)
 8001252:	f001 f913 	bl	800247c <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	f040 8086 	bne.w	800136a <MudarCor+0x35e>
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	48a2      	ldr	r0, [pc, #648]	; (80014ec <MudarCor+0x4e0>)
 8001264:	f001 f90a 	bl	800247c <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d17d      	bne.n	800136a <MudarCor+0x35e>
 800126e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001272:	489e      	ldr	r0, [pc, #632]	; (80014ec <MudarCor+0x4e0>)
 8001274:	f001 f902 	bl	800247c <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d175      	bne.n	800136a <MudarCor+0x35e>
 800127e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001282:	489a      	ldr	r0, [pc, #616]	; (80014ec <MudarCor+0x4e0>)
 8001284:	f001 f8fa 	bl	800247c <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d16d      	bne.n	800136a <MudarCor+0x35e>
			    	    cor=MAGENTA;
 800128e:	4b98      	ldr	r3, [pc, #608]	; (80014f0 <MudarCor+0x4e4>)
 8001290:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001294:	801a      	strh	r2, [r3, #0]
			    	    ST7735_FillScreenFast(cor);
 8001296:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <MudarCor+0x4e4>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fa53 	bl	8000746 <ST7735_FillScreenFast>
			    	    ST7735_WriteString(posxtitulo, posytitulo, "Tabela de cores",Font_7x10, BLACK, cor );
 80012a0:	4b94      	ldr	r3, [pc, #592]	; (80014f4 <MudarCor+0x4e8>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	b298      	uxth	r0, r3
 80012a8:	4b93      	ldr	r3, [pc, #588]	; (80014f8 <MudarCor+0x4ec>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	b299      	uxth	r1, r3
 80012b0:	4b8f      	ldr	r3, [pc, #572]	; (80014f0 <MudarCor+0x4e4>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	4b91      	ldr	r3, [pc, #580]	; (80014fc <MudarCor+0x4f0>)
 80012b6:	9202      	str	r2, [sp, #8]
 80012b8:	2200      	movs	r2, #0
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a8f      	ldr	r2, [pc, #572]	; (8001500 <MudarCor+0x4f4>)
 80012c4:	f7ff f8ea 	bl	800049c <ST7735_WriteString>
						ST7735_WriteString(posxtela, posytela2, "P9-Verde",Font_7x10, BLACK, cor );
 80012c8:	4b8e      	ldr	r3, [pc, #568]	; (8001504 <MudarCor+0x4f8>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	b298      	uxth	r0, r3
 80012d0:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <MudarCor+0x4fc>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	b299      	uxth	r1, r3
 80012d8:	4b85      	ldr	r3, [pc, #532]	; (80014f0 <MudarCor+0x4e4>)
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	4b87      	ldr	r3, [pc, #540]	; (80014fc <MudarCor+0x4f0>)
 80012de:	9202      	str	r2, [sp, #8]
 80012e0:	2200      	movs	r2, #0
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a88      	ldr	r2, [pc, #544]	; (800150c <MudarCor+0x500>)
 80012ec:	f7ff f8d6 	bl	800049c <ST7735_WriteString>
		  				ST7735_WriteString(posxtela, posytela, "PA10-Magenta",Font_7x10, BLACK, cor );
 80012f0:	4b84      	ldr	r3, [pc, #528]	; (8001504 <MudarCor+0x4f8>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	b298      	uxth	r0, r3
 80012f8:	4b85      	ldr	r3, [pc, #532]	; (8001510 <MudarCor+0x504>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	b299      	uxth	r1, r3
 8001300:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <MudarCor+0x4e4>)
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	4b7d      	ldr	r3, [pc, #500]	; (80014fc <MudarCor+0x4f0>)
 8001306:	9202      	str	r2, [sp, #8]
 8001308:	2200      	movs	r2, #0
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a80      	ldr	r2, [pc, #512]	; (8001514 <MudarCor+0x508>)
 8001314:	f7ff f8c2 	bl	800049c <ST7735_WriteString>
 	    				ST7735_WriteString(posxtela, posytela3, "P11-Azul",Font_7x10, BLACK, cor );
 8001318:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <MudarCor+0x4f8>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	b298      	uxth	r0, r3
 8001320:	4b7d      	ldr	r3, [pc, #500]	; (8001518 <MudarCor+0x50c>)
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	b299      	uxth	r1, r3
 8001328:	4b71      	ldr	r3, [pc, #452]	; (80014f0 <MudarCor+0x4e4>)
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	4b73      	ldr	r3, [pc, #460]	; (80014fc <MudarCor+0x4f0>)
 800132e:	9202      	str	r2, [sp, #8]
 8001330:	2200      	movs	r2, #0
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a78      	ldr	r2, [pc, #480]	; (800151c <MudarCor+0x510>)
 800133c:	f7ff f8ae 	bl	800049c <ST7735_WriteString>
	    				ST7735_WriteString(posxtela, posytela4, "P12-Voltar",Font_7x10, BLACK, cor );
 8001340:	4b70      	ldr	r3, [pc, #448]	; (8001504 <MudarCor+0x4f8>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	b298      	uxth	r0, r3
 8001348:	4b75      	ldr	r3, [pc, #468]	; (8001520 <MudarCor+0x514>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	b299      	uxth	r1, r3
 8001350:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <MudarCor+0x4e4>)
 8001352:	881a      	ldrh	r2, [r3, #0]
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <MudarCor+0x4f0>)
 8001356:	9202      	str	r2, [sp, #8]
 8001358:	2200      	movs	r2, #0
 800135a:	9201      	str	r2, [sp, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a70      	ldr	r2, [pc, #448]	; (8001524 <MudarCor+0x518>)
 8001364:	f7ff f89a 	bl	800049c <ST7735_WriteString>
 8001368:	e0b6      	b.n	80014d8 <MudarCor+0x4cc>
			    	    	  }

				else if (BOTAO9 == 1 && BOTAO10 == 1 && BOTAO11 == 0 && BOTAO12 == 1) {
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	485f      	ldr	r0, [pc, #380]	; (80014ec <MudarCor+0x4e0>)
 8001370:	f001 f884 	bl	800247c <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 8085 	bne.w	8001486 <MudarCor+0x47a>
 800137c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001380:	485a      	ldr	r0, [pc, #360]	; (80014ec <MudarCor+0x4e0>)
 8001382:	f001 f87b 	bl	800247c <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b01      	cmp	r3, #1
 800138a:	d17c      	bne.n	8001486 <MudarCor+0x47a>
 800138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001390:	4856      	ldr	r0, [pc, #344]	; (80014ec <MudarCor+0x4e0>)
 8001392:	f001 f873 	bl	800247c <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d174      	bne.n	8001486 <MudarCor+0x47a>
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4852      	ldr	r0, [pc, #328]	; (80014ec <MudarCor+0x4e0>)
 80013a2:	f001 f86b 	bl	800247c <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d16c      	bne.n	8001486 <MudarCor+0x47a>
					cor=BLUE;
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <MudarCor+0x4e4>)
 80013ae:	221f      	movs	r2, #31
 80013b0:	801a      	strh	r2, [r3, #0]
					ST7735_FillScreenFast(cor);
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <MudarCor+0x4e4>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f9c5 	bl	8000746 <ST7735_FillScreenFast>
					ST7735_WriteString(posxtitulo,posytitulo, "Tabela de cores",Font_7x10, BLACK, cor );
 80013bc:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <MudarCor+0x4e8>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	b298      	uxth	r0, r3
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <MudarCor+0x4ec>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	b299      	uxth	r1, r3
 80013cc:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <MudarCor+0x4e4>)
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <MudarCor+0x4f0>)
 80013d2:	9202      	str	r2, [sp, #8]
 80013d4:	2200      	movs	r2, #0
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <MudarCor+0x4f4>)
 80013e0:	f7ff f85c 	bl	800049c <ST7735_WriteString>
					ST7735_WriteString(posxtela, posytela2, "P9-Verde",Font_7x10, BLACK, cor );
 80013e4:	4b47      	ldr	r3, [pc, #284]	; (8001504 <MudarCor+0x4f8>)
 80013e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ea:	b298      	uxth	r0, r3
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <MudarCor+0x4fc>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	b299      	uxth	r1, r3
 80013f4:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <MudarCor+0x4e4>)
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	4b40      	ldr	r3, [pc, #256]	; (80014fc <MudarCor+0x4f0>)
 80013fa:	9202      	str	r2, [sp, #8]
 80013fc:	2200      	movs	r2, #0
 80013fe:	9201      	str	r2, [sp, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a41      	ldr	r2, [pc, #260]	; (800150c <MudarCor+0x500>)
 8001408:	f7ff f848 	bl	800049c <ST7735_WriteString>
			  		ST7735_WriteString(posxtela, posxtela, "PA10-Magenta",Font_7x10, BLACK, cor );
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <MudarCor+0x4f8>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	b298      	uxth	r0, r3
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <MudarCor+0x4f8>)
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	b299      	uxth	r1, r3
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MudarCor+0x4e4>)
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <MudarCor+0x4f0>)
 8001422:	9202      	str	r2, [sp, #8]
 8001424:	2200      	movs	r2, #0
 8001426:	9201      	str	r2, [sp, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a39      	ldr	r2, [pc, #228]	; (8001514 <MudarCor+0x508>)
 8001430:	f7ff f834 	bl	800049c <ST7735_WriteString>
					ST7735_WriteString(posxtela, posytela3, "P11-Azul",Font_7x10, BLACK, cor );
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <MudarCor+0x4f8>)
 8001436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143a:	b298      	uxth	r0, r3
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <MudarCor+0x50c>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	b299      	uxth	r1, r3
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MudarCor+0x4e4>)
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MudarCor+0x4f0>)
 800144a:	9202      	str	r2, [sp, #8]
 800144c:	2200      	movs	r2, #0
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <MudarCor+0x510>)
 8001458:	f7ff f820 	bl	800049c <ST7735_WriteString>
					ST7735_WriteString(posxtela, posytela4, "P12-Voltar",Font_7x10, BLACK, cor );
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MudarCor+0x4f8>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	b298      	uxth	r0, r3
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MudarCor+0x514>)
 8001466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146a:	b299      	uxth	r1, r3
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MudarCor+0x4e4>)
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MudarCor+0x4f0>)
 8001472:	9202      	str	r2, [sp, #8]
 8001474:	2200      	movs	r2, #0
 8001476:	9201      	str	r2, [sp, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	9200      	str	r2, [sp, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a29      	ldr	r2, [pc, #164]	; (8001524 <MudarCor+0x518>)
 8001480:	f7ff f80c 	bl	800049c <ST7735_WriteString>
 8001484:	e028      	b.n	80014d8 <MudarCor+0x4cc>
				    	    	  }
				else if(BOTAO9 == 1 && BOTAO10 == 1 && BOTAO11 == 1 && BOTAO12 == 0){
 8001486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <MudarCor+0x4e0>)
 800148c:	f000 fff6 	bl	800247c <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d120      	bne.n	80014d8 <MudarCor+0x4cc>
 8001496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <MudarCor+0x4e0>)
 800149c:	f000 ffee 	bl	800247c <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d118      	bne.n	80014d8 <MudarCor+0x4cc>
 80014a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <MudarCor+0x4e0>)
 80014ac:	f000 ffe6 	bl	800247c <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d110      	bne.n	80014d8 <MudarCor+0x4cc>
 80014b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <MudarCor+0x4e0>)
 80014bc:	f000 ffde 	bl	800247c <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d108      	bne.n	80014d8 <MudarCor+0x4cc>
					Menu(cor,bomba);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MudarCor+0x4e4>)
 80014c8:	881a      	ldrh	r2, [r3, #0]
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MudarCor+0x51c>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4610      	mov	r0, r2
 80014d4:	f7ff fac4 	bl	8000a60 <Menu>
		while(escolhacor==0){
 80014d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f43f ae04 	beq.w	80010ea <MudarCor+0xde>
				}
		}

}
 80014e2:	bf00      	nop
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40010800 	.word	0x40010800
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000014 	.word	0x20000014
 80014f8:	200000b0 	.word	0x200000b0
 80014fc:	20000000 	.word	0x20000000
 8001500:	08003b30 	.word	0x08003b30
 8001504:	20000016 	.word	0x20000016
 8001508:	2000001a 	.word	0x2000001a
 800150c:	08003b40 	.word	0x08003b40
 8001510:	20000018 	.word	0x20000018
 8001514:	08003b4c 	.word	0x08003b4c
 8001518:	2000001c 	.word	0x2000001c
 800151c:	08003b5c 	.word	0x08003b5c
 8001520:	2000001e 	.word	0x2000001e
 8001524:	08003b68 	.word	0x08003b68
 8001528:	20000012 	.word	0x20000012

0800152c <DificuldadeLed>:
short DificuldadeLed(uint16_t cor){
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af04      	add	r7, sp, #16
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	int escolhadificuldade=0;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]

	ST7735_FillScreenFast(cor);
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f902 	bl	8000746 <ST7735_FillScreenFast>
	ST7735_WriteString(posxtitulo, posytitulo, "Escolha o nivel",Font_7x10, BLACK, cor );
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <DificuldadeLed+0x1a8>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	b298      	uxth	r0, r3
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <DificuldadeLed+0x1ac>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	b299      	uxth	r1, r3
 8001552:	4b62      	ldr	r3, [pc, #392]	; (80016dc <DificuldadeLed+0x1b0>)
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	2200      	movs	r2, #0
 800155a:	9201      	str	r2, [sp, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <DificuldadeLed+0x1b4>)
 8001564:	f7fe ff9a 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela2, "P9-Facil",Font_7x10, BLACK, cor );
 8001568:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <DificuldadeLed+0x1b8>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	b298      	uxth	r0, r3
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <DificuldadeLed+0x1bc>)
 8001572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001576:	b299      	uxth	r1, r3
 8001578:	4b58      	ldr	r3, [pc, #352]	; (80016dc <DificuldadeLed+0x1b0>)
 800157a:	88fa      	ldrh	r2, [r7, #6]
 800157c:	9202      	str	r2, [sp, #8]
 800157e:	2200      	movs	r2, #0
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	9200      	str	r2, [sp, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <DificuldadeLed+0x1c0>)
 800158a:	f7fe ff87 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela, "PA10-Medio",Font_7x10, BLACK, cor );
 800158e:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <DificuldadeLed+0x1b8>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	b298      	uxth	r0, r3
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <DificuldadeLed+0x1c4>)
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	b299      	uxth	r1, r3
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <DificuldadeLed+0x1b0>)
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	9202      	str	r2, [sp, #8]
 80015a4:	2200      	movs	r2, #0
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	9200      	str	r2, [sp, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a51      	ldr	r2, [pc, #324]	; (80016f4 <DificuldadeLed+0x1c8>)
 80015b0:	f7fe ff74 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela3, "P11-Dificil",Font_7x10, BLACK, cor );
 80015b4:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <DificuldadeLed+0x1b8>)
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	b298      	uxth	r0, r3
 80015bc:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <DificuldadeLed+0x1cc>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	b299      	uxth	r1, r3
 80015c4:	4b45      	ldr	r3, [pc, #276]	; (80016dc <DificuldadeLed+0x1b0>)
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	9202      	str	r2, [sp, #8]
 80015ca:	2200      	movs	r2, #0
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	9200      	str	r2, [sp, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a49      	ldr	r2, [pc, #292]	; (80016fc <DificuldadeLed+0x1d0>)
 80015d6:	f7fe ff61 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(posxtela, posytela4, "P12-Voltar",Font_7x10, BLACK, cor );
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <DificuldadeLed+0x1b8>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	b298      	uxth	r0, r3
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <DificuldadeLed+0x1d4>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	b299      	uxth	r1, r3
 80015ea:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <DificuldadeLed+0x1b0>)
 80015ec:	88fa      	ldrh	r2, [r7, #6]
 80015ee:	9202      	str	r2, [sp, #8]
 80015f0:	2200      	movs	r2, #0
 80015f2:	9201      	str	r2, [sp, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	9200      	str	r2, [sp, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a42      	ldr	r2, [pc, #264]	; (8001704 <DificuldadeLed+0x1d8>)
 80015fc:	f7fe ff4e 	bl	800049c <ST7735_WriteString>

	while(escolhadificuldade==0){
 8001600:	e05f      	b.n	80016c2 <DificuldadeLed+0x196>
	if(BOTAO9==0){
 8001602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001606:	4840      	ldr	r0, [pc, #256]	; (8001708 <DificuldadeLed+0x1dc>)
 8001608:	f000 ff38 	bl	800247c <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d108      	bne.n	8001624 <DificuldadeLed+0xf8>
	LED6_LIGA;
 8001612:	2201      	movs	r2, #1
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	483d      	ldr	r0, [pc, #244]	; (800170c <DificuldadeLed+0x1e0>)
 8001618:	f000 ff47 	bl	80024aa <HAL_GPIO_WritePin>
	bomba=7;
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <DificuldadeLed+0x1e4>)
 800161e:	2207      	movs	r2, #7
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	e04e      	b.n	80016c2 <DificuldadeLed+0x196>
}
	else if(BOTAO10==0){
 8001624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001628:	4837      	ldr	r0, [pc, #220]	; (8001708 <DificuldadeLed+0x1dc>)
 800162a:	f000 ff27 	bl	800247c <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10a      	bne.n	800164a <DificuldadeLed+0x11e>
		LED6_LIGA;
 8001634:	2201      	movs	r2, #1
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <DificuldadeLed+0x1e0>)
 800163a:	f000 ff36 	bl	80024aa <HAL_GPIO_WritePin>
		LED5_LIGA;
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4832      	ldr	r0, [pc, #200]	; (800170c <DificuldadeLed+0x1e0>)
 8001644:	f000 ff31 	bl	80024aa <HAL_GPIO_WritePin>
 8001648:	e03b      	b.n	80016c2 <DificuldadeLed+0x196>
	}
	else if(BOTAO11==0){
 800164a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800164e:	482e      	ldr	r0, [pc, #184]	; (8001708 <DificuldadeLed+0x1dc>)
 8001650:	f000 ff14 	bl	800247c <HAL_GPIO_ReadPin>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d112      	bne.n	8001680 <DificuldadeLed+0x154>
	LED6_LIGA;
 800165a:	2201      	movs	r2, #1
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <DificuldadeLed+0x1e0>)
 8001660:	f000 ff23 	bl	80024aa <HAL_GPIO_WritePin>
	LED5_LIGA;
 8001664:	2201      	movs	r2, #1
 8001666:	2120      	movs	r1, #32
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <DificuldadeLed+0x1e0>)
 800166a:	f000 ff1e 	bl	80024aa <HAL_GPIO_WritePin>
	LED4_LIGA;
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	4826      	ldr	r0, [pc, #152]	; (800170c <DificuldadeLed+0x1e0>)
 8001674:	f000 ff19 	bl	80024aa <HAL_GPIO_WritePin>
	bomba=15;
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <DificuldadeLed+0x1e4>)
 800167a:	220f      	movs	r2, #15
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	e020      	b.n	80016c2 <DificuldadeLed+0x196>
	}
	else if(BOTAO12==0){
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	4820      	ldr	r0, [pc, #128]	; (8001708 <DificuldadeLed+0x1dc>)
 8001686:	f000 fef9 	bl	800247c <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d118      	bne.n	80016c2 <DificuldadeLed+0x196>
		LED6_DESLIGA;
 8001690:	2200      	movs	r2, #0
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	481d      	ldr	r0, [pc, #116]	; (800170c <DificuldadeLed+0x1e0>)
 8001696:	f000 ff08 	bl	80024aa <HAL_GPIO_WritePin>
		LED5_DESLIGA;
 800169a:	2200      	movs	r2, #0
 800169c:	2120      	movs	r1, #32
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <DificuldadeLed+0x1e0>)
 80016a0:	f000 ff03 	bl	80024aa <HAL_GPIO_WritePin>
		LED4_DESLIGA;
 80016a4:	2200      	movs	r2, #0
 80016a6:	2110      	movs	r1, #16
 80016a8:	4818      	ldr	r0, [pc, #96]	; (800170c <DificuldadeLed+0x1e0>)
 80016aa:	f000 fefe 	bl	80024aa <HAL_GPIO_WritePin>
		escolhadificuldade=1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
		Menu(cor,bomba);
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <DificuldadeLed+0x1e4>)
 80016b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f9cf 	bl	8000a60 <Menu>
	while(escolhadificuldade==0){
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d09c      	beq.n	8001602 <DificuldadeLed+0xd6>

	}

}
}
 80016c8:	bf00      	nop
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000014 	.word	0x20000014
 80016d8:	200000b0 	.word	0x200000b0
 80016dc:	20000000 	.word	0x20000000
 80016e0:	08003b74 	.word	0x08003b74
 80016e4:	20000016 	.word	0x20000016
 80016e8:	2000001a 	.word	0x2000001a
 80016ec:	08003b84 	.word	0x08003b84
 80016f0:	20000018 	.word	0x20000018
 80016f4:	08003b90 	.word	0x08003b90
 80016f8:	2000001c 	.word	0x2000001c
 80016fc:	08003b9c 	.word	0x08003b9c
 8001700:	2000001e 	.word	0x2000001e
 8001704:	08003b68 	.word	0x08003b68
 8001708:	40010800 	.word	0x40010800
 800170c:	40010c00 	.word	0x40010c00
 8001710:	20000012 	.word	0x20000012

08001714 <Derrota_Vitoria>:
short Derrota_Vitoria(short result/*casasabertas, uint16_t cor */){
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af04      	add	r7, sp, #16
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
		//casasvitoria=casastotais-bomba;
		if(/*casasabertas==casasvitoria*/ result == 1){
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d118      	bne.n	8001758 <Derrota_Vitoria+0x44>
			ST7735_FillScreenFast(GREEN);
 8001726:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800172a:	f7ff f80c 	bl	8000746 <ST7735_FillScreenFast>
			ST7735_WriteString(posxtitulo, posytitulo, "Parabens!", Font_11x18, BLACK, GREEN);
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <Derrota_Vitoria+0x78>)
 8001730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001734:	b298      	uxth	r0, r3
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <Derrota_Vitoria+0x7c>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	b299      	uxth	r1, r3
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <Derrota_Vitoria+0x80>)
 8001740:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001744:	9202      	str	r2, [sp, #8]
 8001746:	2200      	movs	r2, #0
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <Derrota_Vitoria+0x84>)
 8001752:	f7fe fea3 	bl	800049c <ST7735_WriteString>
 8001756:	e017      	b.n	8001788 <Derrota_Vitoria+0x74>
							return 0;
						}*/

		}
		else {
			ST7735_FillScreenFast(RED);
 8001758:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800175c:	f7fe fff3 	bl	8000746 <ST7735_FillScreenFast>
			ST7735_WriteString(posxtitulo, posytitulo, "Voce Perdeu", Font_11x18, BLACK, RED);
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <Derrota_Vitoria+0x78>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b298      	uxth	r0, r3
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <Derrota_Vitoria+0x7c>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	b299      	uxth	r1, r3
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <Derrota_Vitoria+0x80>)
 8001772:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001776:	9202      	str	r2, [sp, #8]
 8001778:	2200      	movs	r2, #0
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a06      	ldr	r2, [pc, #24]	; (800179c <Derrota_Vitoria+0x88>)
 8001784:	f7fe fe8a 	bl	800049c <ST7735_WriteString>
			}


*/
		}
	while (1) {}
 8001788:	e7fe      	b.n	8001788 <Derrota_Vitoria+0x74>
 800178a:	bf00      	nop
 800178c:	20000014 	.word	0x20000014
 8001790:	200000b0 	.word	0x200000b0
 8001794:	20000008 	.word	0x20000008
 8001798:	08003ba8 	.word	0x08003ba8
 800179c:	08003bb4 	.word	0x08003bb4

080017a0 <Descoberta>:
	}

void Descoberta() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af04      	add	r7, sp, #16
	if (camp[cursorX - 1][cursorY - 1] == -1) {
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <Descoberta+0x158>)
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	4b53      	ldr	r3, [pc, #332]	; (80018fc <Descoberta+0x15c>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4952      	ldr	r1, [pc, #328]	; (8001900 <Descoberta+0x160>)
 80017b8:	00d2      	lsls	r2, r2, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d103      	bne.n	80017ce <Descoberta+0x2e>
		Derrota_Vitoria(0);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff ffa4 	bl	8001714 <Derrota_Vitoria>
 80017cc:	e091      	b.n	80018f2 <Descoberta+0x152>
	} else {
		camp[cursorX - 1][cursorY - 1] = 1;
 80017ce:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <Descoberta+0x158>)
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <Descoberta+0x15c>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4948      	ldr	r1, [pc, #288]	; (8001900 <Descoberta+0x160>)
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	2201      	movs	r2, #1
 80017e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, "O" , Font_7x10 , BLACK , WHITE);
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <Descoberta+0x158>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3302      	adds	r3, #2
 8001800:	b298      	uxth	r0, r3
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <Descoberta+0x15c>)
 8001804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001808:	3b01      	subs	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4413      	add	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	b29b      	uxth	r3, r3
 8001816:	3302      	adds	r3, #2
 8001818:	b299      	uxth	r1, r3
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <Descoberta+0x164>)
 800181c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001820:	9202      	str	r2, [sp, #8]
 8001822:	2200      	movs	r2, #0
 8001824:	9201      	str	r2, [sp, #4]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a36      	ldr	r2, [pc, #216]	; (8001908 <Descoberta+0x168>)
 800182e:	f7fe fe35 	bl	800049c <ST7735_WriteString>
		consertaTabuleiro ();
 8001832:	f000 f9d3 	bl	8001bdc <consertaTabuleiro>

		cursorEsquerda();
 8001836:	f000 f96b 	bl	8001b10 <cursorEsquerda>
		ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, "X" , Font_7x10 , BLACK , WHITE);
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <Descoberta+0x158>)
 800183c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001840:	3b01      	subs	r3, #1
 8001842:	b29b      	uxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	3302      	adds	r3, #2
 8001850:	b298      	uxth	r0, r3
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <Descoberta+0x15c>)
 8001854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001858:	3b01      	subs	r3, #1
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4413      	add	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	3302      	adds	r3, #2
 8001868:	b299      	uxth	r1, r3
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <Descoberta+0x164>)
 800186c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001870:	9202      	str	r2, [sp, #8]
 8001872:	2200      	movs	r2, #0
 8001874:	9201      	str	r2, [sp, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	9200      	str	r2, [sp, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <Descoberta+0x16c>)
 800187e:	f7fe fe0d 	bl	800049c <ST7735_WriteString>
		consertaTabuleiro ();
 8001882:	f000 f9ab 	bl	8001bdc <consertaTabuleiro>

		for(i = 0; i < 8; i++) {
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <Descoberta+0x170>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e028      	b.n	80018e0 <Descoberta+0x140>
			for(j = 0; j < 8; j++) {
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <Descoberta+0x174>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e01b      	b.n	80018ce <Descoberta+0x12e>
				if ((camp[i][j] == 0)||(camp[i][j] == -1)) {
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <Descoberta+0x170>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <Descoberta+0x174>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4918      	ldr	r1, [pc, #96]	; (8001900 <Descoberta+0x160>)
 80018a0:	00d2      	lsls	r2, r2, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d021      	beq.n	80018f0 <Descoberta+0x150>
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <Descoberta+0x170>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <Descoberta+0x174>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4912      	ldr	r1, [pc, #72]	; (8001900 <Descoberta+0x160>)
 80018b6:	00d2      	lsls	r2, r2, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80018be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c2:	d015      	beq.n	80018f0 <Descoberta+0x150>
			for(j = 0; j < 8; j++) {
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <Descoberta+0x174>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <Descoberta+0x174>)
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <Descoberta+0x174>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	dddf      	ble.n	8001896 <Descoberta+0xf6>
		for(i = 0; i < 8; i++) {
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <Descoberta+0x170>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <Descoberta+0x170>)
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <Descoberta+0x170>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	ddd2      	ble.n	800188e <Descoberta+0xee>
					return;
				}
			}
		}
		Derrota_Vitoria(1);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f7ff ff13 	bl	8001714 <Derrota_Vitoria>
 80018ee:	e000      	b.n	80018f2 <Descoberta+0x152>
					return;
 80018f0:	bf00      	nop
	}
}
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000020 	.word	0x20000020
 80018fc:	20000022 	.word	0x20000022
 8001900:	200000c8 	.word	0x200000c8
 8001904:	20000000 	.word	0x20000000
 8001908:	08003bc0 	.word	0x08003bc0
 800190c:	08003b28 	.word	0x08003b28
 8001910:	200000c4 	.word	0x200000c4
 8001914:	200000b4 	.word	0x200000b4

08001918 <Bandeira>:

void Bandeira(void){
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af04      	add	r7, sp, #16
	camp[cursorX - 1][cursorY - 1] = 2;
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <Bandeira+0xe4>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <Bandeira+0xe8>)
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	3b01      	subs	r3, #1
 800192e:	4935      	ldr	r1, [pc, #212]	; (8001a04 <Bandeira+0xec>)
 8001930:	00d2      	lsls	r2, r2, #3
 8001932:	4413      	add	r3, r2
 8001934:	2202      	movs	r2, #2
 8001936:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	bomba--;
 800193a:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <Bandeira+0xf0>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	b29b      	uxth	r3, r3
 8001942:	3b01      	subs	r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <Bandeira+0xf0>)
 800194a:	801a      	strh	r2, [r3, #0]

	ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, "B" , Font_7x10 , BLACK , WHITE);
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <Bandeira+0xe4>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	b29b      	uxth	r3, r3
 8001960:	3302      	adds	r3, #2
 8001962:	b298      	uxth	r0, r3
 8001964:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <Bandeira+0xe8>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	3b01      	subs	r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	b29b      	uxth	r3, r3
 8001978:	3302      	adds	r3, #2
 800197a:	b299      	uxth	r1, r3
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <Bandeira+0xf4>)
 800197e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001982:	9202      	str	r2, [sp, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	9201      	str	r2, [sp, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	9200      	str	r2, [sp, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <Bandeira+0xf8>)
 8001990:	f7fe fd84 	bl	800049c <ST7735_WriteString>
	consertaTabuleiro ();
 8001994:	f000 f922 	bl	8001bdc <consertaTabuleiro>

	cursorEsquerda();
 8001998:	f000 f8ba 	bl	8001b10 <cursorEsquerda>
	ST7735_WriteString(2 + (cursorX - 1) * 10, 2 + (cursorY - 1) * 10, "X" , Font_7x10 , BLACK , WHITE);
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <Bandeira+0xe4>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3302      	adds	r3, #2
 80019b2:	b298      	uxth	r0, r3
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <Bandeira+0xe8>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3302      	adds	r3, #2
 80019ca:	b299      	uxth	r1, r3
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <Bandeira+0xf4>)
 80019ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d2:	9202      	str	r2, [sp, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	9201      	str	r2, [sp, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <Bandeira+0xfc>)
 80019e0:	f7fe fd5c 	bl	800049c <ST7735_WriteString>
	consertaTabuleiro ();
 80019e4:	f000 f8fa 	bl	8001bdc <consertaTabuleiro>

	atualizarBandeiras();
 80019e8:	f000 f816 	bl	8001a18 <atualizarBandeiras>
	HAL_Delay(700);
 80019ec:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80019f0:	f000 fae4 	bl	8001fbc <HAL_Delay>
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000020 	.word	0x20000020
 8001a00:	20000022 	.word	0x20000022
 8001a04:	200000c8 	.word	0x200000c8
 8001a08:	20000012 	.word	0x20000012
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	08003bc4 	.word	0x08003bc4
 8001a14:	08003b28 	.word	0x08003b28

08001a18 <atualizarBandeiras>:

void atualizarBandeiras() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af04      	add	r7, sp, #16
	sprintf(buffer, "%d ", bomba);
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <atualizarBandeiras+0x38>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	461a      	mov	r2, r3
 8001a26:	490b      	ldr	r1, [pc, #44]	; (8001a54 <atualizarBandeiras+0x3c>)
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <atualizarBandeiras+0x40>)
 8001a2a:	f001 fcd3 	bl	80033d4 <siprintf>
	ST7735_WriteString(110, 40, buffer,Font_11x18, BLACK, cor );
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <atualizarBandeiras+0x44>)
 8001a30:	881a      	ldrh	r2, [r3, #0]
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <atualizarBandeiras+0x48>)
 8001a34:	9202      	str	r2, [sp, #8]
 8001a36:	2200      	movs	r2, #0
 8001a38:	9201      	str	r2, [sp, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	9200      	str	r2, [sp, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <atualizarBandeiras+0x40>)
 8001a42:	2128      	movs	r1, #40	; 0x28
 8001a44:	206e      	movs	r0, #110	; 0x6e
 8001a46:	f7fe fd29 	bl	800049c <ST7735_WriteString>
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000012 	.word	0x20000012
 8001a54:	08003bc8 	.word	0x08003bc8
 8001a58:	20000148 	.word	0x20000148
 8001a5c:	20000010 	.word	0x20000010
 8001a60:	20000008 	.word	0x20000008

08001a64 <cursorDireita>:
void cursorDireita () {
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	for(;;) {
		cursorX++;
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <cursorDireita+0xa0>)
 8001a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <cursorDireita+0xa0>)
 8001a78:	801a      	strh	r2, [r3, #0]
		if (cursorX == 9 && cursorY == 8) {
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <cursorDireita+0xa0>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d10b      	bne.n	8001a9c <cursorDireita+0x38>
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <cursorDireita+0xa4>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d106      	bne.n	8001a9c <cursorDireita+0x38>
			cursorX = 1;
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <cursorDireita+0xa0>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	801a      	strh	r2, [r3, #0]
			cursorY = 1;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <cursorDireita+0xa4>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	e010      	b.n	8001abe <cursorDireita+0x5a>
		} else if (cursorX == 9) {
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <cursorDireita+0xa0>)
 8001a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d10b      	bne.n	8001abe <cursorDireita+0x5a>
			cursorX = 1;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <cursorDireita+0xa0>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	801a      	strh	r2, [r3, #0]
			cursorY++;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <cursorDireita+0xa4>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <cursorDireita+0xa4>)
 8001abc:	801a      	strh	r2, [r3, #0]
		}

		if (camp[cursorX - 1][cursorY - 1] != 1 && camp[cursorX - 1][cursorY - 1] != 2) {
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <cursorDireita+0xa0>)
 8001ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <cursorDireita+0xa4>)
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	490f      	ldr	r1, [pc, #60]	; (8001b0c <cursorDireita+0xa8>)
 8001ad0:	00d2      	lsls	r2, r2, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d0c5      	beq.n	8001a68 <cursorDireita+0x4>
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <cursorDireita+0xa0>)
 8001ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <cursorDireita+0xa4>)
 8001ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <cursorDireita+0xa8>)
 8001aee:	00d2      	lsls	r2, r2, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d100      	bne.n	8001afc <cursorDireita+0x98>
		cursorX++;
 8001afa:	e7b5      	b.n	8001a68 <cursorDireita+0x4>
			return;
 8001afc:	bf00      	nop
		}
	}
}
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000020 	.word	0x20000020
 8001b08:	20000022 	.word	0x20000022
 8001b0c:	200000c8 	.word	0x200000c8

08001b10 <cursorEsquerda>:
void cursorEsquerda () {
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	for(i = 0; i<36; i++) {
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <cursorEsquerda+0xbc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e04d      	b.n	8001bb8 <cursorEsquerda+0xa8>
		cursorX--;
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b2c:	801a      	strh	r2, [r3, #0]
		if (cursorX == 0 && cursorY == 1) {
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10b      	bne.n	8001b50 <cursorEsquerda+0x40>
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <cursorEsquerda+0xc4>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d106      	bne.n	8001b50 <cursorEsquerda+0x40>
			cursorX = 8;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b44:	2208      	movs	r2, #8
 8001b46:	801a      	strh	r2, [r3, #0]
			cursorY = 8;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <cursorEsquerda+0xc4>)
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e010      	b.n	8001b72 <cursorEsquerda+0x62>
		} else if (cursorX == 0) {
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <cursorEsquerda+0x62>
			cursorX = 8;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	801a      	strh	r2, [r3, #0]
			cursorY--;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <cursorEsquerda+0xc4>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <cursorEsquerda+0xc4>)
 8001b70:	801a      	strh	r2, [r3, #0]
		}

		if (camp[cursorX - 1][cursorY - 1] != 1 && camp[cursorX - 1][cursorY - 1] != 2) {
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <cursorEsquerda+0xc4>)
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	4915      	ldr	r1, [pc, #84]	; (8001bd8 <cursorEsquerda+0xc8>)
 8001b84:	00d2      	lsls	r2, r2, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d00e      	beq.n	8001bae <cursorEsquerda+0x9e>
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <cursorEsquerda+0xc0>)
 8001b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <cursorEsquerda+0xc4>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	490d      	ldr	r1, [pc, #52]	; (8001bd8 <cursorEsquerda+0xc8>)
 8001ba2:	00d2      	lsls	r2, r2, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d109      	bne.n	8001bc2 <cursorEsquerda+0xb2>
	for(i = 0; i<36; i++) {
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <cursorEsquerda+0xbc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <cursorEsquerda+0xbc>)
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <cursorEsquerda+0xbc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b23      	cmp	r3, #35	; 0x23
 8001bbe:	ddad      	ble.n	8001b1c <cursorEsquerda+0xc>
 8001bc0:	e000      	b.n	8001bc4 <cursorEsquerda+0xb4>
					return;
 8001bc2:	bf00      	nop
		}
	}
}
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200000c4 	.word	0x200000c4
 8001bd0:	20000020 	.word	0x20000020
 8001bd4:	20000022 	.word	0x20000022
 8001bd8:	200000c8 	.word	0x200000c8

08001bdc <consertaTabuleiro>:
void consertaTabuleiro () {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af02      	add	r7, sp, #8
			ST7735_DrawLine((cursorX*10), 0, (cursorX*10), 80, BLACK);
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <consertaTabuleiro+0x70>)
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	b298      	uxth	r0, r3
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <consertaTabuleiro+0x70>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2350      	movs	r3, #80	; 0x50
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	f7fe fdab 	bl	8000768 <ST7735_DrawLine>
			ST7735_DrawLine(0, (cursorY*10), 80, (cursorY*10), BLACK);
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <consertaTabuleiro+0x74>)
 8001c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	b299      	uxth	r1, r3
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <consertaTabuleiro+0x74>)
 8001c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	2250      	movs	r2, #80	; 0x50
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f7fe fd92 	bl	8000768 <ST7735_DrawLine>
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000020 	.word	0x20000020
 8001c50:	20000022 	.word	0x20000022

08001c54 <distribuirBombas>:

void distribuirBombas(int nBombas) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	for(;;) {
		for(i = 0; i < 8; i++) {
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <distribuirBombas+0x84>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e02f      	b.n	8001cc4 <distribuirBombas+0x70>
			for(j = 0; j < 8; j++) {
 8001c64:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <distribuirBombas+0x88>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e022      	b.n	8001cb2 <distribuirBombas+0x5e>
				short valor = (rand() % 2) - 1;
 8001c6c:	f001 fb6e 	bl	800334c <rand>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	bfb8      	it	lt
 8001c7a:	425b      	neglt	r3, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	81fb      	strh	r3, [r7, #14]
				nBombas+= valor;
 8001c84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	607b      	str	r3, [r7, #4]
				camp[i][j] = valor;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <distribuirBombas+0x84>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <distribuirBombas+0x88>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <distribuirBombas+0x8c>)
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	89fa      	ldrh	r2, [r7, #14]
 8001c9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				if (nBombas == 0)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <distribuirBombas+0x7a>
			for(j = 0; j < 8; j++) {
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <distribuirBombas+0x88>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <distribuirBombas+0x88>)
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <distribuirBombas+0x88>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	ddd8      	ble.n	8001c6c <distribuirBombas+0x18>
		for(i = 0; i < 8; i++) {
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <distribuirBombas+0x84>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <distribuirBombas+0x84>)
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <distribuirBombas+0x84>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b07      	cmp	r3, #7
 8001cca:	ddcb      	ble.n	8001c64 <distribuirBombas+0x10>
 8001ccc:	e7c6      	b.n	8001c5c <distribuirBombas+0x8>
					return;
 8001cce:	bf00      	nop
			}
		}
	}
}
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200000c4 	.word	0x200000c4
 8001cdc:	200000b4 	.word	0x200000b4
 8001ce0:	200000c8 	.word	0x200000c8

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cea:	e7fe      	b.n	8001cea <Error_Handler+0x6>

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x60>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_MspInit+0x60>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_SPI_MspInit+0x88>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d12f      	bne.n	8001dd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_SPI_MspInit+0x8c>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001da0:	23a0      	movs	r3, #160	; 0xa0
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <HAL_SPI_MspInit+0x90>)
 8001db4:	f000 fa08 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001db8:	2340      	movs	r3, #64	; 0x40
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <HAL_SPI_MspInit+0x90>)
 8001dcc:	f000 f9fc 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40013000 	.word	0x40013000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <NMI_Handler+0x4>

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 f8ab 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d207      	bcs.n	8001e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e64:	f001 f98a 	bl	800317c <__errno>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	230c      	movs	r3, #12
 8001e6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e009      	b.n	8001e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <_sbrk+0x64>)
 8001e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e86:	68fb      	ldr	r3, [r7, #12]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20005000 	.word	0x20005000
 8001e94:	00000400 	.word	0x00000400
 8001e98:	200000b8 	.word	0x200000b8
 8001e9c:	200001b8 	.word	0x200001b8

08001ea0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eae:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	; (8001ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ed2:	f7ff ffe5 	bl	8001ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f001 f957 	bl	8003188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eda:	f7fe fcd1 	bl	8000880 <main>
  bx lr
 8001ede:	4770      	bx	lr
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001ee8:	0800516c 	.word	0x0800516c
  ldr r2, =_sbss
 8001eec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ef0:	200001b8 	.word	0x200001b8

08001ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC1_2_IRQHandler>
	...

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_Init+0x28>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_Init+0x28>)
 8001f02:	f043 0310 	orr.w	r3, r3, #16
 8001f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f929 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff feea 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f933 	bl	80021ae <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 f909 	bl	8002176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000024 	.word	0x20000024
 8001f7c:	2000002c 	.word	0x2000002c
 8001f80:	20000028 	.word	0x20000028

08001f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_IncTick+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <HAL_IncTick+0x20>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	2000002c 	.word	0x2000002c
 8001fa4:	200001b0 	.word	0x200001b0

08001fa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <HAL_GetTick+0x10>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	200001b0 	.word	0x200001b0

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff fff0 	bl	8001fa8 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d005      	beq.n	8001fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_Delay+0x40>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffe0 	bl	8001fa8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d8f7      	bhi.n	8001fe4 <HAL_Delay+0x28>
  {
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000002c 	.word	0x2000002c

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db0a      	blt.n	800208e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	b2da      	uxtb	r2, r3
 800207c:	490c      	ldr	r1, [pc, #48]	; (80020b0 <__NVIC_SetPriority+0x4c>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	440b      	add	r3, r1
 8002088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800208c:	e00a      	b.n	80020a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4908      	ldr	r1, [pc, #32]	; (80020b4 <__NVIC_SetPriority+0x50>)
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	3b04      	subs	r3, #4
 800209c:	0112      	lsls	r2, r2, #4
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	440b      	add	r3, r1
 80020a2:	761a      	strb	r2, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f1c3 0307 	rsb	r3, r3, #7
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf28      	it	cs
 80020d6:	2304      	movcs	r3, #4
 80020d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3304      	adds	r3, #4
 80020de:	2b06      	cmp	r3, #6
 80020e0:	d902      	bls.n	80020e8 <NVIC_EncodePriority+0x30>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3b03      	subs	r3, #3
 80020e6:	e000      	b.n	80020ea <NVIC_EncodePriority+0x32>
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	f04f 32ff 	mov.w	r2, #4294967295
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	401a      	ands	r2, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43d9      	mvns	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	4313      	orrs	r3, r2
         );
}
 8002112:	4618      	mov	r0, r3
 8002114:	3724      	adds	r7, #36	; 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f7ff ff90 	bl	8002064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff49 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002188:	f7ff ff5e 	bl	8002048 <__NVIC_GetPriorityGrouping>
 800218c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	6978      	ldr	r0, [r7, #20]
 8002194:	f7ff ff90 	bl	80020b8 <NVIC_EncodePriority>
 8002198:	4602      	mov	r2, r0
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff5f 	bl	8002064 <__NVIC_SetPriority>
}
 80021a6:	bf00      	nop
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffb0 	bl	800211c <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b08b      	sub	sp, #44	; 0x2c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e127      	b.n	800242c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021dc:	2201      	movs	r2, #1
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8116 	bne.w	8002426 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d034      	beq.n	800226c <HAL_GPIO_Init+0xa4>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d80d      	bhi.n	8002222 <HAL_GPIO_Init+0x5a>
 8002206:	2b02      	cmp	r3, #2
 8002208:	d02b      	beq.n	8002262 <HAL_GPIO_Init+0x9a>
 800220a:	2b02      	cmp	r3, #2
 800220c:	d804      	bhi.n	8002218 <HAL_GPIO_Init+0x50>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d031      	beq.n	8002276 <HAL_GPIO_Init+0xae>
 8002212:	2b01      	cmp	r3, #1
 8002214:	d01c      	beq.n	8002250 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002216:	e048      	b.n	80022aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002218:	2b03      	cmp	r3, #3
 800221a:	d043      	beq.n	80022a4 <HAL_GPIO_Init+0xdc>
 800221c:	2b11      	cmp	r3, #17
 800221e:	d01b      	beq.n	8002258 <HAL_GPIO_Init+0x90>
          break;
 8002220:	e043      	b.n	80022aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002222:	4a89      	ldr	r2, [pc, #548]	; (8002448 <HAL_GPIO_Init+0x280>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d026      	beq.n	8002276 <HAL_GPIO_Init+0xae>
 8002228:	4a87      	ldr	r2, [pc, #540]	; (8002448 <HAL_GPIO_Init+0x280>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d806      	bhi.n	800223c <HAL_GPIO_Init+0x74>
 800222e:	4a87      	ldr	r2, [pc, #540]	; (800244c <HAL_GPIO_Init+0x284>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d020      	beq.n	8002276 <HAL_GPIO_Init+0xae>
 8002234:	4a86      	ldr	r2, [pc, #536]	; (8002450 <HAL_GPIO_Init+0x288>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_GPIO_Init+0xae>
          break;
 800223a:	e036      	b.n	80022aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800223c:	4a85      	ldr	r2, [pc, #532]	; (8002454 <HAL_GPIO_Init+0x28c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d019      	beq.n	8002276 <HAL_GPIO_Init+0xae>
 8002242:	4a85      	ldr	r2, [pc, #532]	; (8002458 <HAL_GPIO_Init+0x290>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d016      	beq.n	8002276 <HAL_GPIO_Init+0xae>
 8002248:	4a84      	ldr	r2, [pc, #528]	; (800245c <HAL_GPIO_Init+0x294>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0xae>
          break;
 800224e:	e02c      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e028      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e023      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	3308      	adds	r3, #8
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e01e      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	330c      	adds	r3, #12
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e019      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227e:	2304      	movs	r3, #4
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e012      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	611a      	str	r2, [r3, #16]
          break;
 8002296:	e008      	b.n	80022aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002298:	2308      	movs	r3, #8
 800229a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	615a      	str	r2, [r3, #20]
          break;
 80022a2:	e002      	b.n	80022aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2bff      	cmp	r3, #255	; 0xff
 80022ae:	d801      	bhi.n	80022b4 <HAL_GPIO_Init+0xec>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	e001      	b.n	80022b8 <HAL_GPIO_Init+0xf0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2bff      	cmp	r3, #255	; 0xff
 80022be:	d802      	bhi.n	80022c6 <HAL_GPIO_Init+0xfe>
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x104>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	3b08      	subs	r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	210f      	movs	r1, #15
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	6a39      	ldr	r1, [r7, #32]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	431a      	orrs	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8096 	beq.w	8002426 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022fa:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_GPIO_Init+0x298>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_GPIO_Init+0x298>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6193      	str	r3, [r2, #24]
 8002306:	4b56      	ldr	r3, [pc, #344]	; (8002460 <HAL_GPIO_Init+0x298>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002312:	4a54      	ldr	r2, [pc, #336]	; (8002464 <HAL_GPIO_Init+0x29c>)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x2a0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x19e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_GPIO_Init+0x2a4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x19a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a49      	ldr	r2, [pc, #292]	; (8002470 <HAL_GPIO_Init+0x2a8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x196>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a48      	ldr	r2, [pc, #288]	; (8002474 <HAL_GPIO_Init+0x2ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x192>
 8002356:	2303      	movs	r3, #3
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x1a0>
 800235a:	2304      	movs	r3, #4
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x1a0>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x1a0>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x1a0>
 8002366:	2300      	movs	r3, #0
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002378:	493a      	ldr	r1, [pc, #232]	; (8002464 <HAL_GPIO_Init+0x29c>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4938      	ldr	r1, [pc, #224]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
 800239e:	e006      	b.n	80023ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4933      	ldr	r1, [pc, #204]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	492e      	ldr	r1, [pc, #184]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
 80023c6:	e006      	b.n	80023d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4929      	ldr	r1, [pc, #164]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	4924      	ldr	r1, [pc, #144]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
 80023ee:	e006      	b.n	80023fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	491f      	ldr	r1, [pc, #124]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	491a      	ldr	r1, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	60cb      	str	r3, [r1, #12]
 8002416:	e006      	b.n	8002426 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	43db      	mvns	r3, r3
 8002420:	4915      	ldr	r1, [pc, #84]	; (8002478 <HAL_GPIO_Init+0x2b0>)
 8002422:	4013      	ands	r3, r2
 8002424:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	3301      	adds	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	f47f aed0 	bne.w	80021dc <HAL_GPIO_Init+0x14>
  }
}
 800243c:	bf00      	nop
 800243e:	372c      	adds	r7, #44	; 0x2c
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	10210000 	.word	0x10210000
 800244c:	10110000 	.word	0x10110000
 8002450:	10120000 	.word	0x10120000
 8002454:	10310000 	.word	0x10310000
 8002458:	10320000 	.word	0x10320000
 800245c:	10220000 	.word	0x10220000
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	40010800 	.word	0x40010800
 800246c:	40010c00 	.word	0x40010c00
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e001      	b.n	800249e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	807b      	strh	r3, [r7, #2]
 80024b6:	4613      	mov	r3, r2
 80024b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ba:	787b      	ldrb	r3, [r7, #1]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c6:	e003      	b.n	80024d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	041a      	lsls	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e26c      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b92      	ldr	r3, [pc, #584]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002508:	4b8f      	ldr	r3, [pc, #572]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b89      	ldr	r3, [pc, #548]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x12c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e246      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7f      	ldr	r2, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7a      	ldr	r2, [pc, #488]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b78      	ldr	r3, [pc, #480]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xbc>
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a71      	ldr	r2, [pc, #452]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002598:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a67      	ldr	r2, [pc, #412]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fcf6 	bl	8001fa8 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fcf2 	bl	8001fa8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1fa      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe4>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff fce2 	bl	8001fa8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff fcde 	bl	8001fa8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1e6      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x10c>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1ba      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4939      	ldr	r1, [pc, #228]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7ff fc97 	bl	8001fa8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7ff fc93 	bl	8001fa8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e19b      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4927      	ldr	r1, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x270>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fc76 	bl	8001fa8 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff fc72 	bl	8001fa8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e17a      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03a      	beq.n	8002760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7ff fc56 	bl	8001fa8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7ff fc52 	bl	8001fa8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e15a      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271e:	2001      	movs	r0, #1
 8002720:	f000 faa8 	bl	8002c74 <RCC_Delay>
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_RCC_OscConfig+0x274>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7ff fc3c 	bl	8001fa8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff fc38 	bl	8001fa8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e140      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	42420000 	.word	0x42420000
 8002750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b9e      	ldr	r3, [pc, #632]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e9      	bne.n	8002734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a6 	beq.w	80028ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b97      	ldr	r3, [pc, #604]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b94      	ldr	r3, [pc, #592]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a93      	ldr	r2, [pc, #588]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b8e      	ldr	r3, [pc, #568]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8a      	ldr	r2, [pc, #552]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fbf9 	bl	8001fa8 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7ff fbf5 	bl	8001fa8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	; 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0fd      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b81      	ldr	r3, [pc, #516]	; (80029d4 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027e0:	4b7b      	ldr	r3, [pc, #492]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a7a      	ldr	r2, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e02d      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x334>
 80027f6:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a75      	ldr	r2, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a72      	ldr	r2, [pc, #456]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x356>
 8002818:	4b6d      	ldr	r3, [pc, #436]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a6c      	ldr	r2, [pc, #432]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7ff fba9 	bl	8001fa8 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7ff fba5 	bl	8001fa8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0ab      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x37e>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7ff fb93 	bl	8001fa8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7ff fb8f 	bl	8001fa8 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e095      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a47      	ldr	r2, [pc, #284]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8081 	beq.w	80029c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d061      	beq.n	8002994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d146      	bne.n	8002966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x4fc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff fb63 	bl	8001fa8 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff fb5f 	bl	8001fa8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e067      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290e:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	492d      	ldr	r1, [pc, #180]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a19      	ldr	r1, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	430b      	orrs	r3, r1
 8002932:	4927      	ldr	r1, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x4fc>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7ff fb33 	bl	8001fa8 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7ff fb2f 	bl	8001fa8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e037      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
 8002964:	e02f      	b.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_RCC_OscConfig+0x4fc>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fb1c 	bl	8001fa8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7ff fb18 	bl	8001fa8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e020      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x498>
 8002992:	e018      	b.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e013      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42420060 	.word	0x42420060

080029dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0d0      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d910      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4965      	ldr	r1, [pc, #404]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d040      	beq.n	8002afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d115      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e073      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06b      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aba:	4b39      	ldr	r3, [pc, #228]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f023 0203 	bic.w	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4936      	ldr	r1, [pc, #216]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002acc:	f7ff fa6c 	bl	8001fa8 <HAL_GetTick>
 8002ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad4:	f7ff fa68 	bl	8001fa8 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e053      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 020c 	and.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d1eb      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002afc:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d210      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	4922      	ldr	r1, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f821 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1d0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f9ca 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08005120 	.word	0x08005120
 8002ba8:	20000024 	.word	0x20000024
 8002bac:	20000028 	.word	0x20000028

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b490      	push	{r4, r7}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bb8:	1d3c      	adds	r4, r7, #4
 8002bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bee:	e02d      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf2:	623b      	str	r3, [r7, #32]
      break;
 8002bf4:	e02d      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c02:	4413      	add	r3, r2
 8002c04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c5b      	lsrs	r3, r3, #17
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c22:	4413      	add	r3, r2
 8002c24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2e:	fb02 f203 	mul.w	r2, r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	e004      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c40:	fb02 f303 	mul.w	r3, r2, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	623b      	str	r3, [r7, #32]
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c4e:	623b      	str	r3, [r7, #32]
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc90      	pop	{r4, r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	08003bcc 	.word	0x08003bcc
 8002c64:	08003bdc 	.word	0x08003bdc
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	007a1200 	.word	0x007a1200
 8002c70:	003d0900 	.word	0x003d0900

08002c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <RCC_Delay+0x34>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <RCC_Delay+0x38>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0a5b      	lsrs	r3, r3, #9
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c90:	bf00      	nop
  }
  while (Delay --);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	60fa      	str	r2, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f9      	bne.n	8002c90 <RCC_Delay+0x1c>
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000024 	.word	0x20000024
 8002cac:	10624dd3 	.word	0x10624dd3

08002cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e076      	b.n	8002db0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d108      	bne.n	8002cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd2:	d009      	beq.n	8002ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
 8002cda:	e005      	b.n	8002ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff f824 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	ea42 0103 	orr.w	r1, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	0c1a      	lsrs	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f002 0204 	and.w	r2, r2, #4
 8002d8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_SPI_Transmit+0x22>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e126      	b.n	8003028 <HAL_SPI_Transmit+0x270>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de2:	f7ff f8e1 	bl	8001fa8 <HAL_GetTick>
 8002de6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dfc:	e10b      	b.n	8003016 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_SPI_Transmit+0x52>
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e0e:	e102      	b.n	8003016 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2203      	movs	r2, #3
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e56:	d10f      	bne.n	8002e78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d007      	beq.n	8002e96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e9e:	d14b      	bne.n	8002f38 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_Transmit+0xf6>
 8002ea8:	8afb      	ldrh	r3, [r7, #22]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d13e      	bne.n	8002f2c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	881a      	ldrh	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	1c9a      	adds	r2, r3, #2
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ed2:	e02b      	b.n	8002f2c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d112      	bne.n	8002f08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	1c9a      	adds	r2, r3, #2
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f06:	e011      	b.n	8002f2c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f08:	f7ff f84e 	bl	8001fa8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d803      	bhi.n	8002f20 <HAL_SPI_Transmit+0x168>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Transmit+0x16e>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f2a:	e074      	b.n	8003016 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ce      	bne.n	8002ed4 <HAL_SPI_Transmit+0x11c>
 8002f36:	e04c      	b.n	8002fd2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_Transmit+0x18e>
 8002f40:	8afb      	ldrh	r3, [r7, #22]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d140      	bne.n	8002fc8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f6c:	e02c      	b.n	8002fc8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d113      	bne.n	8002fa4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fa2:	e011      	b.n	8002fc8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa4:	f7ff f800 	bl	8001fa8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d803      	bhi.n	8002fbc <HAL_SPI_Transmit+0x204>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Transmit+0x20a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fc6:	e026      	b.n	8003016 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1cd      	bne.n	8002f6e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8b2 	bl	8003140 <SPI_EndRxTxTransaction>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e000      	b.n	8003016 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003026:	7ffb      	ldrb	r3, [r7, #31]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003040:	f7fe ffb2 	bl	8001fa8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003050:	f7fe ffaa 	bl	8001fa8 <HAL_GetTick>
 8003054:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	0d1b      	lsrs	r3, r3, #20
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003066:	e054      	b.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d050      	beq.n	8003112 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003070:	f7fe ff9a 	bl	8001fa8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	d902      	bls.n	8003086 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d13d      	bne.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d111      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	d004      	beq.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d107      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d10f      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e017      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3b01      	subs	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	429a      	cmp	r2, r3
 800312e:	d19b      	bne.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000024 	.word	0x20000024

08003140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ff6a 	bl	8003030 <SPI_WaitFlagStateUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e000      	b.n	8003174 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <__errno>:
 800317c:	4b01      	ldr	r3, [pc, #4]	; (8003184 <__errno+0x8>)
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000030 	.word	0x20000030

08003188 <__libc_init_array>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	2500      	movs	r5, #0
 800318c:	4e0c      	ldr	r6, [pc, #48]	; (80031c0 <__libc_init_array+0x38>)
 800318e:	4c0d      	ldr	r4, [pc, #52]	; (80031c4 <__libc_init_array+0x3c>)
 8003190:	1ba4      	subs	r4, r4, r6
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	42a5      	cmp	r5, r4
 8003196:	d109      	bne.n	80031ac <__libc_init_array+0x24>
 8003198:	f000 fc78 	bl	8003a8c <_init>
 800319c:	2500      	movs	r5, #0
 800319e:	4e0a      	ldr	r6, [pc, #40]	; (80031c8 <__libc_init_array+0x40>)
 80031a0:	4c0a      	ldr	r4, [pc, #40]	; (80031cc <__libc_init_array+0x44>)
 80031a2:	1ba4      	subs	r4, r4, r6
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	42a5      	cmp	r5, r4
 80031a8:	d105      	bne.n	80031b6 <__libc_init_array+0x2e>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031b0:	4798      	blx	r3
 80031b2:	3501      	adds	r5, #1
 80031b4:	e7ee      	b.n	8003194 <__libc_init_array+0xc>
 80031b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ba:	4798      	blx	r3
 80031bc:	3501      	adds	r5, #1
 80031be:	e7f2      	b.n	80031a6 <__libc_init_array+0x1e>
 80031c0:	08005164 	.word	0x08005164
 80031c4:	08005164 	.word	0x08005164
 80031c8:	08005164 	.word	0x08005164
 80031cc:	08005168 	.word	0x08005168

080031d0 <malloc>:
 80031d0:	4b02      	ldr	r3, [pc, #8]	; (80031dc <malloc+0xc>)
 80031d2:	4601      	mov	r1, r0
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	f000 b85f 	b.w	8003298 <_malloc_r>
 80031da:	bf00      	nop
 80031dc:	20000030 	.word	0x20000030

080031e0 <free>:
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <free+0xc>)
 80031e2:	4601      	mov	r1, r0
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	f000 b80b 	b.w	8003200 <_free_r>
 80031ea:	bf00      	nop
 80031ec:	20000030 	.word	0x20000030

080031f0 <memset>:
 80031f0:	4603      	mov	r3, r0
 80031f2:	4402      	add	r2, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	f803 1b01 	strb.w	r1, [r3], #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <_free_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	2900      	cmp	r1, #0
 8003206:	d043      	beq.n	8003290 <_free_r+0x90>
 8003208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800320c:	1f0c      	subs	r4, r1, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	bfb8      	it	lt
 8003212:	18e4      	addlt	r4, r4, r3
 8003214:	f000 f8fe 	bl	8003414 <__malloc_lock>
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <_free_r+0x94>)
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	4610      	mov	r0, r2
 800321e:	b933      	cbnz	r3, 800322e <_free_r+0x2e>
 8003220:	6063      	str	r3, [r4, #4]
 8003222:	6014      	str	r4, [r2, #0]
 8003224:	4628      	mov	r0, r5
 8003226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800322a:	f000 b8f4 	b.w	8003416 <__malloc_unlock>
 800322e:	42a3      	cmp	r3, r4
 8003230:	d90b      	bls.n	800324a <_free_r+0x4a>
 8003232:	6821      	ldr	r1, [r4, #0]
 8003234:	1862      	adds	r2, r4, r1
 8003236:	4293      	cmp	r3, r2
 8003238:	bf01      	itttt	eq
 800323a:	681a      	ldreq	r2, [r3, #0]
 800323c:	685b      	ldreq	r3, [r3, #4]
 800323e:	1852      	addeq	r2, r2, r1
 8003240:	6022      	streq	r2, [r4, #0]
 8003242:	6063      	str	r3, [r4, #4]
 8003244:	6004      	str	r4, [r0, #0]
 8003246:	e7ed      	b.n	8003224 <_free_r+0x24>
 8003248:	4613      	mov	r3, r2
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	b10a      	cbz	r2, 8003252 <_free_r+0x52>
 800324e:	42a2      	cmp	r2, r4
 8003250:	d9fa      	bls.n	8003248 <_free_r+0x48>
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	1858      	adds	r0, r3, r1
 8003256:	42a0      	cmp	r0, r4
 8003258:	d10b      	bne.n	8003272 <_free_r+0x72>
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	4401      	add	r1, r0
 800325e:	1858      	adds	r0, r3, r1
 8003260:	4282      	cmp	r2, r0
 8003262:	6019      	str	r1, [r3, #0]
 8003264:	d1de      	bne.n	8003224 <_free_r+0x24>
 8003266:	6810      	ldr	r0, [r2, #0]
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	4401      	add	r1, r0
 800326c:	6019      	str	r1, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	e7d8      	b.n	8003224 <_free_r+0x24>
 8003272:	d902      	bls.n	800327a <_free_r+0x7a>
 8003274:	230c      	movs	r3, #12
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	e7d4      	b.n	8003224 <_free_r+0x24>
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	1821      	adds	r1, r4, r0
 800327e:	428a      	cmp	r2, r1
 8003280:	bf01      	itttt	eq
 8003282:	6811      	ldreq	r1, [r2, #0]
 8003284:	6852      	ldreq	r2, [r2, #4]
 8003286:	1809      	addeq	r1, r1, r0
 8003288:	6021      	streq	r1, [r4, #0]
 800328a:	6062      	str	r2, [r4, #4]
 800328c:	605c      	str	r4, [r3, #4]
 800328e:	e7c9      	b.n	8003224 <_free_r+0x24>
 8003290:	bd38      	pop	{r3, r4, r5, pc}
 8003292:	bf00      	nop
 8003294:	200000bc 	.word	0x200000bc

08003298 <_malloc_r>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	1ccd      	adds	r5, r1, #3
 800329c:	f025 0503 	bic.w	r5, r5, #3
 80032a0:	3508      	adds	r5, #8
 80032a2:	2d0c      	cmp	r5, #12
 80032a4:	bf38      	it	cc
 80032a6:	250c      	movcc	r5, #12
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	4606      	mov	r6, r0
 80032ac:	db01      	blt.n	80032b2 <_malloc_r+0x1a>
 80032ae:	42a9      	cmp	r1, r5
 80032b0:	d903      	bls.n	80032ba <_malloc_r+0x22>
 80032b2:	230c      	movs	r3, #12
 80032b4:	6033      	str	r3, [r6, #0]
 80032b6:	2000      	movs	r0, #0
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	f000 f8ab 	bl	8003414 <__malloc_lock>
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <_malloc_r+0xac>)
 80032c0:	6814      	ldr	r4, [r2, #0]
 80032c2:	4621      	mov	r1, r4
 80032c4:	b991      	cbnz	r1, 80032ec <_malloc_r+0x54>
 80032c6:	4c20      	ldr	r4, [pc, #128]	; (8003348 <_malloc_r+0xb0>)
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	b91b      	cbnz	r3, 80032d4 <_malloc_r+0x3c>
 80032cc:	4630      	mov	r0, r6
 80032ce:	f000 f871 	bl	80033b4 <_sbrk_r>
 80032d2:	6020      	str	r0, [r4, #0]
 80032d4:	4629      	mov	r1, r5
 80032d6:	4630      	mov	r0, r6
 80032d8:	f000 f86c 	bl	80033b4 <_sbrk_r>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d124      	bne.n	800332a <_malloc_r+0x92>
 80032e0:	230c      	movs	r3, #12
 80032e2:	4630      	mov	r0, r6
 80032e4:	6033      	str	r3, [r6, #0]
 80032e6:	f000 f896 	bl	8003416 <__malloc_unlock>
 80032ea:	e7e4      	b.n	80032b6 <_malloc_r+0x1e>
 80032ec:	680b      	ldr	r3, [r1, #0]
 80032ee:	1b5b      	subs	r3, r3, r5
 80032f0:	d418      	bmi.n	8003324 <_malloc_r+0x8c>
 80032f2:	2b0b      	cmp	r3, #11
 80032f4:	d90f      	bls.n	8003316 <_malloc_r+0x7e>
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	18cc      	adds	r4, r1, r3
 80032fa:	50cd      	str	r5, [r1, r3]
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f88a 	bl	8003416 <__malloc_unlock>
 8003302:	f104 000b 	add.w	r0, r4, #11
 8003306:	1d23      	adds	r3, r4, #4
 8003308:	f020 0007 	bic.w	r0, r0, #7
 800330c:	1ac3      	subs	r3, r0, r3
 800330e:	d0d3      	beq.n	80032b8 <_malloc_r+0x20>
 8003310:	425a      	negs	r2, r3
 8003312:	50e2      	str	r2, [r4, r3]
 8003314:	e7d0      	b.n	80032b8 <_malloc_r+0x20>
 8003316:	684b      	ldr	r3, [r1, #4]
 8003318:	428c      	cmp	r4, r1
 800331a:	bf16      	itet	ne
 800331c:	6063      	strne	r3, [r4, #4]
 800331e:	6013      	streq	r3, [r2, #0]
 8003320:	460c      	movne	r4, r1
 8003322:	e7eb      	b.n	80032fc <_malloc_r+0x64>
 8003324:	460c      	mov	r4, r1
 8003326:	6849      	ldr	r1, [r1, #4]
 8003328:	e7cc      	b.n	80032c4 <_malloc_r+0x2c>
 800332a:	1cc4      	adds	r4, r0, #3
 800332c:	f024 0403 	bic.w	r4, r4, #3
 8003330:	42a0      	cmp	r0, r4
 8003332:	d005      	beq.n	8003340 <_malloc_r+0xa8>
 8003334:	1a21      	subs	r1, r4, r0
 8003336:	4630      	mov	r0, r6
 8003338:	f000 f83c 	bl	80033b4 <_sbrk_r>
 800333c:	3001      	adds	r0, #1
 800333e:	d0cf      	beq.n	80032e0 <_malloc_r+0x48>
 8003340:	6025      	str	r5, [r4, #0]
 8003342:	e7db      	b.n	80032fc <_malloc_r+0x64>
 8003344:	200000bc 	.word	0x200000bc
 8003348:	200000c0 	.word	0x200000c0

0800334c <rand>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <rand+0x50>)
 8003350:	681c      	ldr	r4, [r3, #0]
 8003352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003354:	b97b      	cbnz	r3, 8003376 <rand+0x2a>
 8003356:	2018      	movs	r0, #24
 8003358:	f7ff ff3a 	bl	80031d0 <malloc>
 800335c:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <rand+0x54>)
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <rand+0x58>)
 8003360:	63a0      	str	r0, [r4, #56]	; 0x38
 8003362:	e9c0 2300 	strd	r2, r3, [r0]
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <rand+0x5c>)
 8003368:	2201      	movs	r2, #1
 800336a:	6083      	str	r3, [r0, #8]
 800336c:	230b      	movs	r3, #11
 800336e:	8183      	strh	r3, [r0, #12]
 8003370:	2300      	movs	r3, #0
 8003372:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003376:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003378:	480c      	ldr	r0, [pc, #48]	; (80033ac <rand+0x60>)
 800337a:	690a      	ldr	r2, [r1, #16]
 800337c:	694b      	ldr	r3, [r1, #20]
 800337e:	4350      	muls	r0, r2
 8003380:	4c0b      	ldr	r4, [pc, #44]	; (80033b0 <rand+0x64>)
 8003382:	fb04 0003 	mla	r0, r4, r3, r0
 8003386:	fba2 2304 	umull	r2, r3, r2, r4
 800338a:	4403      	add	r3, r0
 800338c:	1c54      	adds	r4, r2, #1
 800338e:	f143 0500 	adc.w	r5, r3, #0
 8003392:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003396:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000030 	.word	0x20000030
 80033a0:	abcd330e 	.word	0xabcd330e
 80033a4:	e66d1234 	.word	0xe66d1234
 80033a8:	0005deec 	.word	0x0005deec
 80033ac:	5851f42d 	.word	0x5851f42d
 80033b0:	4c957f2d 	.word	0x4c957f2d

080033b4 <_sbrk_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	2300      	movs	r3, #0
 80033b8:	4c05      	ldr	r4, [pc, #20]	; (80033d0 <_sbrk_r+0x1c>)
 80033ba:	4605      	mov	r5, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	f7fe fd38 	bl	8001e34 <_sbrk>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_sbrk_r+0x1a>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_sbrk_r+0x1a>
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	200001b4 	.word	0x200001b4

080033d4 <siprintf>:
 80033d4:	b40e      	push	{r1, r2, r3}
 80033d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033da:	b500      	push	{lr}
 80033dc:	b09c      	sub	sp, #112	; 0x70
 80033de:	ab1d      	add	r3, sp, #116	; 0x74
 80033e0:	9002      	str	r0, [sp, #8]
 80033e2:	9006      	str	r0, [sp, #24]
 80033e4:	9107      	str	r1, [sp, #28]
 80033e6:	9104      	str	r1, [sp, #16]
 80033e8:	4808      	ldr	r0, [pc, #32]	; (800340c <siprintf+0x38>)
 80033ea:	4909      	ldr	r1, [pc, #36]	; (8003410 <siprintf+0x3c>)
 80033ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80033f0:	9105      	str	r1, [sp, #20]
 80033f2:	6800      	ldr	r0, [r0, #0]
 80033f4:	a902      	add	r1, sp, #8
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	f000 f868 	bl	80034cc <_svfiprintf_r>
 80033fc:	2200      	movs	r2, #0
 80033fe:	9b02      	ldr	r3, [sp, #8]
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	b01c      	add	sp, #112	; 0x70
 8003404:	f85d eb04 	ldr.w	lr, [sp], #4
 8003408:	b003      	add	sp, #12
 800340a:	4770      	bx	lr
 800340c:	20000030 	.word	0x20000030
 8003410:	ffff0208 	.word	0xffff0208

08003414 <__malloc_lock>:
 8003414:	4770      	bx	lr

08003416 <__malloc_unlock>:
 8003416:	4770      	bx	lr

08003418 <__ssputs_r>:
 8003418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800341c:	688e      	ldr	r6, [r1, #8]
 800341e:	4682      	mov	sl, r0
 8003420:	429e      	cmp	r6, r3
 8003422:	460c      	mov	r4, r1
 8003424:	4690      	mov	r8, r2
 8003426:	4699      	mov	r9, r3
 8003428:	d837      	bhi.n	800349a <__ssputs_r+0x82>
 800342a:	898a      	ldrh	r2, [r1, #12]
 800342c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003430:	d031      	beq.n	8003496 <__ssputs_r+0x7e>
 8003432:	2302      	movs	r3, #2
 8003434:	6825      	ldr	r5, [r4, #0]
 8003436:	6909      	ldr	r1, [r1, #16]
 8003438:	1a6f      	subs	r7, r5, r1
 800343a:	6965      	ldr	r5, [r4, #20]
 800343c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003440:	fb95 f5f3 	sdiv	r5, r5, r3
 8003444:	f109 0301 	add.w	r3, r9, #1
 8003448:	443b      	add	r3, r7
 800344a:	429d      	cmp	r5, r3
 800344c:	bf38      	it	cc
 800344e:	461d      	movcc	r5, r3
 8003450:	0553      	lsls	r3, r2, #21
 8003452:	d530      	bpl.n	80034b6 <__ssputs_r+0x9e>
 8003454:	4629      	mov	r1, r5
 8003456:	f7ff ff1f 	bl	8003298 <_malloc_r>
 800345a:	4606      	mov	r6, r0
 800345c:	b950      	cbnz	r0, 8003474 <__ssputs_r+0x5c>
 800345e:	230c      	movs	r3, #12
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f8ca 3000 	str.w	r3, [sl]
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003474:	463a      	mov	r2, r7
 8003476:	6921      	ldr	r1, [r4, #16]
 8003478:	f000 fab6 	bl	80039e8 <memcpy>
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	6126      	str	r6, [r4, #16]
 800348a:	443e      	add	r6, r7
 800348c:	6026      	str	r6, [r4, #0]
 800348e:	464e      	mov	r6, r9
 8003490:	6165      	str	r5, [r4, #20]
 8003492:	1bed      	subs	r5, r5, r7
 8003494:	60a5      	str	r5, [r4, #8]
 8003496:	454e      	cmp	r6, r9
 8003498:	d900      	bls.n	800349c <__ssputs_r+0x84>
 800349a:	464e      	mov	r6, r9
 800349c:	4632      	mov	r2, r6
 800349e:	4641      	mov	r1, r8
 80034a0:	6820      	ldr	r0, [r4, #0]
 80034a2:	f000 faac 	bl	80039fe <memmove>
 80034a6:	68a3      	ldr	r3, [r4, #8]
 80034a8:	2000      	movs	r0, #0
 80034aa:	1b9b      	subs	r3, r3, r6
 80034ac:	60a3      	str	r3, [r4, #8]
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	441e      	add	r6, r3
 80034b2:	6026      	str	r6, [r4, #0]
 80034b4:	e7dc      	b.n	8003470 <__ssputs_r+0x58>
 80034b6:	462a      	mov	r2, r5
 80034b8:	f000 faba 	bl	8003a30 <_realloc_r>
 80034bc:	4606      	mov	r6, r0
 80034be:	2800      	cmp	r0, #0
 80034c0:	d1e2      	bne.n	8003488 <__ssputs_r+0x70>
 80034c2:	6921      	ldr	r1, [r4, #16]
 80034c4:	4650      	mov	r0, sl
 80034c6:	f7ff fe9b 	bl	8003200 <_free_r>
 80034ca:	e7c8      	b.n	800345e <__ssputs_r+0x46>

080034cc <_svfiprintf_r>:
 80034cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d0:	461d      	mov	r5, r3
 80034d2:	898b      	ldrh	r3, [r1, #12]
 80034d4:	b09d      	sub	sp, #116	; 0x74
 80034d6:	061f      	lsls	r7, r3, #24
 80034d8:	4680      	mov	r8, r0
 80034da:	460c      	mov	r4, r1
 80034dc:	4616      	mov	r6, r2
 80034de:	d50f      	bpl.n	8003500 <_svfiprintf_r+0x34>
 80034e0:	690b      	ldr	r3, [r1, #16]
 80034e2:	b96b      	cbnz	r3, 8003500 <_svfiprintf_r+0x34>
 80034e4:	2140      	movs	r1, #64	; 0x40
 80034e6:	f7ff fed7 	bl	8003298 <_malloc_r>
 80034ea:	6020      	str	r0, [r4, #0]
 80034ec:	6120      	str	r0, [r4, #16]
 80034ee:	b928      	cbnz	r0, 80034fc <_svfiprintf_r+0x30>
 80034f0:	230c      	movs	r3, #12
 80034f2:	f8c8 3000 	str.w	r3, [r8]
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	e0c8      	b.n	800368e <_svfiprintf_r+0x1c2>
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	6163      	str	r3, [r4, #20]
 8003500:	2300      	movs	r3, #0
 8003502:	9309      	str	r3, [sp, #36]	; 0x24
 8003504:	2320      	movs	r3, #32
 8003506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800350a:	2330      	movs	r3, #48	; 0x30
 800350c:	f04f 0b01 	mov.w	fp, #1
 8003510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003514:	9503      	str	r5, [sp, #12]
 8003516:	4637      	mov	r7, r6
 8003518:	463d      	mov	r5, r7
 800351a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800351e:	b10b      	cbz	r3, 8003524 <_svfiprintf_r+0x58>
 8003520:	2b25      	cmp	r3, #37	; 0x25
 8003522:	d13e      	bne.n	80035a2 <_svfiprintf_r+0xd6>
 8003524:	ebb7 0a06 	subs.w	sl, r7, r6
 8003528:	d00b      	beq.n	8003542 <_svfiprintf_r+0x76>
 800352a:	4653      	mov	r3, sl
 800352c:	4632      	mov	r2, r6
 800352e:	4621      	mov	r1, r4
 8003530:	4640      	mov	r0, r8
 8003532:	f7ff ff71 	bl	8003418 <__ssputs_r>
 8003536:	3001      	adds	r0, #1
 8003538:	f000 80a4 	beq.w	8003684 <_svfiprintf_r+0x1b8>
 800353c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800353e:	4453      	add	r3, sl
 8003540:	9309      	str	r3, [sp, #36]	; 0x24
 8003542:	783b      	ldrb	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 809d 	beq.w	8003684 <_svfiprintf_r+0x1b8>
 800354a:	2300      	movs	r3, #0
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	9307      	str	r3, [sp, #28]
 8003558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800355c:	931a      	str	r3, [sp, #104]	; 0x68
 800355e:	462f      	mov	r7, r5
 8003560:	2205      	movs	r2, #5
 8003562:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003566:	4850      	ldr	r0, [pc, #320]	; (80036a8 <_svfiprintf_r+0x1dc>)
 8003568:	f000 fa30 	bl	80039cc <memchr>
 800356c:	9b04      	ldr	r3, [sp, #16]
 800356e:	b9d0      	cbnz	r0, 80035a6 <_svfiprintf_r+0xda>
 8003570:	06d9      	lsls	r1, r3, #27
 8003572:	bf44      	itt	mi
 8003574:	2220      	movmi	r2, #32
 8003576:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800357a:	071a      	lsls	r2, r3, #28
 800357c:	bf44      	itt	mi
 800357e:	222b      	movmi	r2, #43	; 0x2b
 8003580:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003584:	782a      	ldrb	r2, [r5, #0]
 8003586:	2a2a      	cmp	r2, #42	; 0x2a
 8003588:	d015      	beq.n	80035b6 <_svfiprintf_r+0xea>
 800358a:	462f      	mov	r7, r5
 800358c:	2000      	movs	r0, #0
 800358e:	250a      	movs	r5, #10
 8003590:	9a07      	ldr	r2, [sp, #28]
 8003592:	4639      	mov	r1, r7
 8003594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003598:	3b30      	subs	r3, #48	; 0x30
 800359a:	2b09      	cmp	r3, #9
 800359c:	d94d      	bls.n	800363a <_svfiprintf_r+0x16e>
 800359e:	b1b8      	cbz	r0, 80035d0 <_svfiprintf_r+0x104>
 80035a0:	e00f      	b.n	80035c2 <_svfiprintf_r+0xf6>
 80035a2:	462f      	mov	r7, r5
 80035a4:	e7b8      	b.n	8003518 <_svfiprintf_r+0x4c>
 80035a6:	4a40      	ldr	r2, [pc, #256]	; (80036a8 <_svfiprintf_r+0x1dc>)
 80035a8:	463d      	mov	r5, r7
 80035aa:	1a80      	subs	r0, r0, r2
 80035ac:	fa0b f000 	lsl.w	r0, fp, r0
 80035b0:	4318      	orrs	r0, r3
 80035b2:	9004      	str	r0, [sp, #16]
 80035b4:	e7d3      	b.n	800355e <_svfiprintf_r+0x92>
 80035b6:	9a03      	ldr	r2, [sp, #12]
 80035b8:	1d11      	adds	r1, r2, #4
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	9103      	str	r1, [sp, #12]
 80035be:	2a00      	cmp	r2, #0
 80035c0:	db01      	blt.n	80035c6 <_svfiprintf_r+0xfa>
 80035c2:	9207      	str	r2, [sp, #28]
 80035c4:	e004      	b.n	80035d0 <_svfiprintf_r+0x104>
 80035c6:	4252      	negs	r2, r2
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	9207      	str	r2, [sp, #28]
 80035ce:	9304      	str	r3, [sp, #16]
 80035d0:	783b      	ldrb	r3, [r7, #0]
 80035d2:	2b2e      	cmp	r3, #46	; 0x2e
 80035d4:	d10c      	bne.n	80035f0 <_svfiprintf_r+0x124>
 80035d6:	787b      	ldrb	r3, [r7, #1]
 80035d8:	2b2a      	cmp	r3, #42	; 0x2a
 80035da:	d133      	bne.n	8003644 <_svfiprintf_r+0x178>
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	3702      	adds	r7, #2
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	9203      	str	r2, [sp, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bfb8      	it	lt
 80035ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80035ee:	9305      	str	r3, [sp, #20]
 80035f0:	4d2e      	ldr	r5, [pc, #184]	; (80036ac <_svfiprintf_r+0x1e0>)
 80035f2:	2203      	movs	r2, #3
 80035f4:	7839      	ldrb	r1, [r7, #0]
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 f9e8 	bl	80039cc <memchr>
 80035fc:	b138      	cbz	r0, 800360e <_svfiprintf_r+0x142>
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	1b40      	subs	r0, r0, r5
 8003602:	fa03 f000 	lsl.w	r0, r3, r0
 8003606:	9b04      	ldr	r3, [sp, #16]
 8003608:	3701      	adds	r7, #1
 800360a:	4303      	orrs	r3, r0
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	7839      	ldrb	r1, [r7, #0]
 8003610:	2206      	movs	r2, #6
 8003612:	4827      	ldr	r0, [pc, #156]	; (80036b0 <_svfiprintf_r+0x1e4>)
 8003614:	1c7e      	adds	r6, r7, #1
 8003616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800361a:	f000 f9d7 	bl	80039cc <memchr>
 800361e:	2800      	cmp	r0, #0
 8003620:	d038      	beq.n	8003694 <_svfiprintf_r+0x1c8>
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <_svfiprintf_r+0x1e8>)
 8003624:	bb13      	cbnz	r3, 800366c <_svfiprintf_r+0x1a0>
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	3307      	adds	r3, #7
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	3308      	adds	r3, #8
 8003630:	9303      	str	r3, [sp, #12]
 8003632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003634:	444b      	add	r3, r9
 8003636:	9309      	str	r3, [sp, #36]	; 0x24
 8003638:	e76d      	b.n	8003516 <_svfiprintf_r+0x4a>
 800363a:	fb05 3202 	mla	r2, r5, r2, r3
 800363e:	2001      	movs	r0, #1
 8003640:	460f      	mov	r7, r1
 8003642:	e7a6      	b.n	8003592 <_svfiprintf_r+0xc6>
 8003644:	2300      	movs	r3, #0
 8003646:	250a      	movs	r5, #10
 8003648:	4619      	mov	r1, r3
 800364a:	3701      	adds	r7, #1
 800364c:	9305      	str	r3, [sp, #20]
 800364e:	4638      	mov	r0, r7
 8003650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003654:	3a30      	subs	r2, #48	; 0x30
 8003656:	2a09      	cmp	r2, #9
 8003658:	d903      	bls.n	8003662 <_svfiprintf_r+0x196>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0c8      	beq.n	80035f0 <_svfiprintf_r+0x124>
 800365e:	9105      	str	r1, [sp, #20]
 8003660:	e7c6      	b.n	80035f0 <_svfiprintf_r+0x124>
 8003662:	fb05 2101 	mla	r1, r5, r1, r2
 8003666:	2301      	movs	r3, #1
 8003668:	4607      	mov	r7, r0
 800366a:	e7f0      	b.n	800364e <_svfiprintf_r+0x182>
 800366c:	ab03      	add	r3, sp, #12
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4622      	mov	r2, r4
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <_svfiprintf_r+0x1ec>)
 8003674:	a904      	add	r1, sp, #16
 8003676:	4640      	mov	r0, r8
 8003678:	f3af 8000 	nop.w
 800367c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003680:	4681      	mov	r9, r0
 8003682:	d1d6      	bne.n	8003632 <_svfiprintf_r+0x166>
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	065b      	lsls	r3, r3, #25
 8003688:	f53f af35 	bmi.w	80034f6 <_svfiprintf_r+0x2a>
 800368c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800368e:	b01d      	add	sp, #116	; 0x74
 8003690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003694:	ab03      	add	r3, sp, #12
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4622      	mov	r2, r4
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <_svfiprintf_r+0x1ec>)
 800369c:	a904      	add	r1, sp, #16
 800369e:	4640      	mov	r0, r8
 80036a0:	f000 f882 	bl	80037a8 <_printf_i>
 80036a4:	e7ea      	b.n	800367c <_svfiprintf_r+0x1b0>
 80036a6:	bf00      	nop
 80036a8:	08005130 	.word	0x08005130
 80036ac:	08005136 	.word	0x08005136
 80036b0:	0800513a 	.word	0x0800513a
 80036b4:	00000000 	.word	0x00000000
 80036b8:	08003419 	.word	0x08003419

080036bc <_printf_common>:
 80036bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c0:	4691      	mov	r9, r2
 80036c2:	461f      	mov	r7, r3
 80036c4:	688a      	ldr	r2, [r1, #8]
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	4606      	mov	r6, r0
 80036ca:	4293      	cmp	r3, r2
 80036cc:	bfb8      	it	lt
 80036ce:	4613      	movlt	r3, r2
 80036d0:	f8c9 3000 	str.w	r3, [r9]
 80036d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036d8:	460c      	mov	r4, r1
 80036da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036de:	b112      	cbz	r2, 80036e6 <_printf_common+0x2a>
 80036e0:	3301      	adds	r3, #1
 80036e2:	f8c9 3000 	str.w	r3, [r9]
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	0699      	lsls	r1, r3, #26
 80036ea:	bf42      	ittt	mi
 80036ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036f0:	3302      	addmi	r3, #2
 80036f2:	f8c9 3000 	strmi.w	r3, [r9]
 80036f6:	6825      	ldr	r5, [r4, #0]
 80036f8:	f015 0506 	ands.w	r5, r5, #6
 80036fc:	d107      	bne.n	800370e <_printf_common+0x52>
 80036fe:	f104 0a19 	add.w	sl, r4, #25
 8003702:	68e3      	ldr	r3, [r4, #12]
 8003704:	f8d9 2000 	ldr.w	r2, [r9]
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	42ab      	cmp	r3, r5
 800370c:	dc29      	bgt.n	8003762 <_printf_common+0xa6>
 800370e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	3300      	adds	r3, #0
 8003716:	bf18      	it	ne
 8003718:	2301      	movne	r3, #1
 800371a:	0692      	lsls	r2, r2, #26
 800371c:	d42e      	bmi.n	800377c <_printf_common+0xc0>
 800371e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003722:	4639      	mov	r1, r7
 8003724:	4630      	mov	r0, r6
 8003726:	47c0      	blx	r8
 8003728:	3001      	adds	r0, #1
 800372a:	d021      	beq.n	8003770 <_printf_common+0xb4>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	68e5      	ldr	r5, [r4, #12]
 8003730:	f003 0306 	and.w	r3, r3, #6
 8003734:	2b04      	cmp	r3, #4
 8003736:	bf18      	it	ne
 8003738:	2500      	movne	r5, #0
 800373a:	f8d9 2000 	ldr.w	r2, [r9]
 800373e:	f04f 0900 	mov.w	r9, #0
 8003742:	bf08      	it	eq
 8003744:	1aad      	subeq	r5, r5, r2
 8003746:	68a3      	ldr	r3, [r4, #8]
 8003748:	6922      	ldr	r2, [r4, #16]
 800374a:	bf08      	it	eq
 800374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003750:	4293      	cmp	r3, r2
 8003752:	bfc4      	itt	gt
 8003754:	1a9b      	subgt	r3, r3, r2
 8003756:	18ed      	addgt	r5, r5, r3
 8003758:	341a      	adds	r4, #26
 800375a:	454d      	cmp	r5, r9
 800375c:	d11a      	bne.n	8003794 <_printf_common+0xd8>
 800375e:	2000      	movs	r0, #0
 8003760:	e008      	b.n	8003774 <_printf_common+0xb8>
 8003762:	2301      	movs	r3, #1
 8003764:	4652      	mov	r2, sl
 8003766:	4639      	mov	r1, r7
 8003768:	4630      	mov	r0, r6
 800376a:	47c0      	blx	r8
 800376c:	3001      	adds	r0, #1
 800376e:	d103      	bne.n	8003778 <_printf_common+0xbc>
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003778:	3501      	adds	r5, #1
 800377a:	e7c2      	b.n	8003702 <_printf_common+0x46>
 800377c:	2030      	movs	r0, #48	; 0x30
 800377e:	18e1      	adds	r1, r4, r3
 8003780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800378a:	4422      	add	r2, r4
 800378c:	3302      	adds	r3, #2
 800378e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003792:	e7c4      	b.n	800371e <_printf_common+0x62>
 8003794:	2301      	movs	r3, #1
 8003796:	4622      	mov	r2, r4
 8003798:	4639      	mov	r1, r7
 800379a:	4630      	mov	r0, r6
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d0e6      	beq.n	8003770 <_printf_common+0xb4>
 80037a2:	f109 0901 	add.w	r9, r9, #1
 80037a6:	e7d8      	b.n	800375a <_printf_common+0x9e>

080037a8 <_printf_i>:
 80037a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037b0:	460c      	mov	r4, r1
 80037b2:	7e09      	ldrb	r1, [r1, #24]
 80037b4:	b085      	sub	sp, #20
 80037b6:	296e      	cmp	r1, #110	; 0x6e
 80037b8:	4617      	mov	r7, r2
 80037ba:	4606      	mov	r6, r0
 80037bc:	4698      	mov	r8, r3
 80037be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037c0:	f000 80b3 	beq.w	800392a <_printf_i+0x182>
 80037c4:	d822      	bhi.n	800380c <_printf_i+0x64>
 80037c6:	2963      	cmp	r1, #99	; 0x63
 80037c8:	d036      	beq.n	8003838 <_printf_i+0x90>
 80037ca:	d80a      	bhi.n	80037e2 <_printf_i+0x3a>
 80037cc:	2900      	cmp	r1, #0
 80037ce:	f000 80b9 	beq.w	8003944 <_printf_i+0x19c>
 80037d2:	2958      	cmp	r1, #88	; 0x58
 80037d4:	f000 8083 	beq.w	80038de <_printf_i+0x136>
 80037d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037e0:	e032      	b.n	8003848 <_printf_i+0xa0>
 80037e2:	2964      	cmp	r1, #100	; 0x64
 80037e4:	d001      	beq.n	80037ea <_printf_i+0x42>
 80037e6:	2969      	cmp	r1, #105	; 0x69
 80037e8:	d1f6      	bne.n	80037d8 <_printf_i+0x30>
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	0605      	lsls	r5, r0, #24
 80037f0:	f103 0104 	add.w	r1, r3, #4
 80037f4:	d52a      	bpl.n	800384c <_printf_i+0xa4>
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da03      	bge.n	8003806 <_printf_i+0x5e>
 80037fe:	222d      	movs	r2, #45	; 0x2d
 8003800:	425b      	negs	r3, r3
 8003802:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003806:	486f      	ldr	r0, [pc, #444]	; (80039c4 <_printf_i+0x21c>)
 8003808:	220a      	movs	r2, #10
 800380a:	e039      	b.n	8003880 <_printf_i+0xd8>
 800380c:	2973      	cmp	r1, #115	; 0x73
 800380e:	f000 809d 	beq.w	800394c <_printf_i+0x1a4>
 8003812:	d808      	bhi.n	8003826 <_printf_i+0x7e>
 8003814:	296f      	cmp	r1, #111	; 0x6f
 8003816:	d020      	beq.n	800385a <_printf_i+0xb2>
 8003818:	2970      	cmp	r1, #112	; 0x70
 800381a:	d1dd      	bne.n	80037d8 <_printf_i+0x30>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	f043 0320 	orr.w	r3, r3, #32
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	e003      	b.n	800382e <_printf_i+0x86>
 8003826:	2975      	cmp	r1, #117	; 0x75
 8003828:	d017      	beq.n	800385a <_printf_i+0xb2>
 800382a:	2978      	cmp	r1, #120	; 0x78
 800382c:	d1d4      	bne.n	80037d8 <_printf_i+0x30>
 800382e:	2378      	movs	r3, #120	; 0x78
 8003830:	4865      	ldr	r0, [pc, #404]	; (80039c8 <_printf_i+0x220>)
 8003832:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003836:	e055      	b.n	80038e4 <_printf_i+0x13c>
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800383e:	1d19      	adds	r1, r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6011      	str	r1, [r2, #0]
 8003844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003848:	2301      	movs	r3, #1
 800384a:	e08c      	b.n	8003966 <_printf_i+0x1be>
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003852:	6011      	str	r1, [r2, #0]
 8003854:	bf18      	it	ne
 8003856:	b21b      	sxthne	r3, r3
 8003858:	e7cf      	b.n	80037fa <_printf_i+0x52>
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	6825      	ldr	r5, [r4, #0]
 800385e:	1d18      	adds	r0, r3, #4
 8003860:	6010      	str	r0, [r2, #0]
 8003862:	0628      	lsls	r0, r5, #24
 8003864:	d501      	bpl.n	800386a <_printf_i+0xc2>
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	e002      	b.n	8003870 <_printf_i+0xc8>
 800386a:	0668      	lsls	r0, r5, #25
 800386c:	d5fb      	bpl.n	8003866 <_printf_i+0xbe>
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	296f      	cmp	r1, #111	; 0x6f
 8003872:	bf14      	ite	ne
 8003874:	220a      	movne	r2, #10
 8003876:	2208      	moveq	r2, #8
 8003878:	4852      	ldr	r0, [pc, #328]	; (80039c4 <_printf_i+0x21c>)
 800387a:	2100      	movs	r1, #0
 800387c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003880:	6865      	ldr	r5, [r4, #4]
 8003882:	2d00      	cmp	r5, #0
 8003884:	60a5      	str	r5, [r4, #8]
 8003886:	f2c0 8095 	blt.w	80039b4 <_printf_i+0x20c>
 800388a:	6821      	ldr	r1, [r4, #0]
 800388c:	f021 0104 	bic.w	r1, r1, #4
 8003890:	6021      	str	r1, [r4, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13d      	bne.n	8003912 <_printf_i+0x16a>
 8003896:	2d00      	cmp	r5, #0
 8003898:	f040 808e 	bne.w	80039b8 <_printf_i+0x210>
 800389c:	4665      	mov	r5, ip
 800389e:	2a08      	cmp	r2, #8
 80038a0:	d10b      	bne.n	80038ba <_printf_i+0x112>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	07db      	lsls	r3, r3, #31
 80038a6:	d508      	bpl.n	80038ba <_printf_i+0x112>
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	bfde      	ittt	le
 80038b0:	2330      	movle	r3, #48	; 0x30
 80038b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ba:	ebac 0305 	sub.w	r3, ip, r5
 80038be:	6123      	str	r3, [r4, #16]
 80038c0:	f8cd 8000 	str.w	r8, [sp]
 80038c4:	463b      	mov	r3, r7
 80038c6:	aa03      	add	r2, sp, #12
 80038c8:	4621      	mov	r1, r4
 80038ca:	4630      	mov	r0, r6
 80038cc:	f7ff fef6 	bl	80036bc <_printf_common>
 80038d0:	3001      	adds	r0, #1
 80038d2:	d14d      	bne.n	8003970 <_printf_i+0x1c8>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	b005      	add	sp, #20
 80038da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038de:	4839      	ldr	r0, [pc, #228]	; (80039c4 <_printf_i+0x21c>)
 80038e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	6821      	ldr	r1, [r4, #0]
 80038e8:	1d1d      	adds	r5, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6015      	str	r5, [r2, #0]
 80038ee:	060a      	lsls	r2, r1, #24
 80038f0:	d50b      	bpl.n	800390a <_printf_i+0x162>
 80038f2:	07ca      	lsls	r2, r1, #31
 80038f4:	bf44      	itt	mi
 80038f6:	f041 0120 	orrmi.w	r1, r1, #32
 80038fa:	6021      	strmi	r1, [r4, #0]
 80038fc:	b91b      	cbnz	r3, 8003906 <_printf_i+0x15e>
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	f022 0220 	bic.w	r2, r2, #32
 8003904:	6022      	str	r2, [r4, #0]
 8003906:	2210      	movs	r2, #16
 8003908:	e7b7      	b.n	800387a <_printf_i+0xd2>
 800390a:	064d      	lsls	r5, r1, #25
 800390c:	bf48      	it	mi
 800390e:	b29b      	uxthmi	r3, r3
 8003910:	e7ef      	b.n	80038f2 <_printf_i+0x14a>
 8003912:	4665      	mov	r5, ip
 8003914:	fbb3 f1f2 	udiv	r1, r3, r2
 8003918:	fb02 3311 	mls	r3, r2, r1, r3
 800391c:	5cc3      	ldrb	r3, [r0, r3]
 800391e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003922:	460b      	mov	r3, r1
 8003924:	2900      	cmp	r1, #0
 8003926:	d1f5      	bne.n	8003914 <_printf_i+0x16c>
 8003928:	e7b9      	b.n	800389e <_printf_i+0xf6>
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	6825      	ldr	r5, [r4, #0]
 800392e:	1d18      	adds	r0, r3, #4
 8003930:	6961      	ldr	r1, [r4, #20]
 8003932:	6010      	str	r0, [r2, #0]
 8003934:	0628      	lsls	r0, r5, #24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	d501      	bpl.n	800393e <_printf_i+0x196>
 800393a:	6019      	str	r1, [r3, #0]
 800393c:	e002      	b.n	8003944 <_printf_i+0x19c>
 800393e:	066a      	lsls	r2, r5, #25
 8003940:	d5fb      	bpl.n	800393a <_printf_i+0x192>
 8003942:	8019      	strh	r1, [r3, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	4665      	mov	r5, ip
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	e7b9      	b.n	80038c0 <_printf_i+0x118>
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	1d19      	adds	r1, r3, #4
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	681d      	ldr	r5, [r3, #0]
 8003954:	6862      	ldr	r2, [r4, #4]
 8003956:	2100      	movs	r1, #0
 8003958:	4628      	mov	r0, r5
 800395a:	f000 f837 	bl	80039cc <memchr>
 800395e:	b108      	cbz	r0, 8003964 <_printf_i+0x1bc>
 8003960:	1b40      	subs	r0, r0, r5
 8003962:	6060      	str	r0, [r4, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	6123      	str	r3, [r4, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396e:	e7a7      	b.n	80038c0 <_printf_i+0x118>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	462a      	mov	r2, r5
 8003974:	4639      	mov	r1, r7
 8003976:	4630      	mov	r0, r6
 8003978:	47c0      	blx	r8
 800397a:	3001      	adds	r0, #1
 800397c:	d0aa      	beq.n	80038d4 <_printf_i+0x12c>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	079b      	lsls	r3, r3, #30
 8003982:	d413      	bmi.n	80039ac <_printf_i+0x204>
 8003984:	68e0      	ldr	r0, [r4, #12]
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	4298      	cmp	r0, r3
 800398a:	bfb8      	it	lt
 800398c:	4618      	movlt	r0, r3
 800398e:	e7a3      	b.n	80038d8 <_printf_i+0x130>
 8003990:	2301      	movs	r3, #1
 8003992:	464a      	mov	r2, r9
 8003994:	4639      	mov	r1, r7
 8003996:	4630      	mov	r0, r6
 8003998:	47c0      	blx	r8
 800399a:	3001      	adds	r0, #1
 800399c:	d09a      	beq.n	80038d4 <_printf_i+0x12c>
 800399e:	3501      	adds	r5, #1
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	9a03      	ldr	r2, [sp, #12]
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	dcf2      	bgt.n	8003990 <_printf_i+0x1e8>
 80039aa:	e7eb      	b.n	8003984 <_printf_i+0x1dc>
 80039ac:	2500      	movs	r5, #0
 80039ae:	f104 0919 	add.w	r9, r4, #25
 80039b2:	e7f5      	b.n	80039a0 <_printf_i+0x1f8>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ac      	bne.n	8003912 <_printf_i+0x16a>
 80039b8:	7803      	ldrb	r3, [r0, #0]
 80039ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c2:	e76c      	b.n	800389e <_printf_i+0xf6>
 80039c4:	08005141 	.word	0x08005141
 80039c8:	08005152 	.word	0x08005152

080039cc <memchr>:
 80039cc:	b510      	push	{r4, lr}
 80039ce:	b2c9      	uxtb	r1, r1
 80039d0:	4402      	add	r2, r0
 80039d2:	4290      	cmp	r0, r2
 80039d4:	4603      	mov	r3, r0
 80039d6:	d101      	bne.n	80039dc <memchr+0x10>
 80039d8:	2300      	movs	r3, #0
 80039da:	e003      	b.n	80039e4 <memchr+0x18>
 80039dc:	781c      	ldrb	r4, [r3, #0]
 80039de:	3001      	adds	r0, #1
 80039e0:	428c      	cmp	r4, r1
 80039e2:	d1f6      	bne.n	80039d2 <memchr+0x6>
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd10      	pop	{r4, pc}

080039e8 <memcpy>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	1e43      	subs	r3, r0, #1
 80039ec:	440a      	add	r2, r1
 80039ee:	4291      	cmp	r1, r2
 80039f0:	d100      	bne.n	80039f4 <memcpy+0xc>
 80039f2:	bd10      	pop	{r4, pc}
 80039f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039fc:	e7f7      	b.n	80039ee <memcpy+0x6>

080039fe <memmove>:
 80039fe:	4288      	cmp	r0, r1
 8003a00:	b510      	push	{r4, lr}
 8003a02:	eb01 0302 	add.w	r3, r1, r2
 8003a06:	d807      	bhi.n	8003a18 <memmove+0x1a>
 8003a08:	1e42      	subs	r2, r0, #1
 8003a0a:	4299      	cmp	r1, r3
 8003a0c:	d00a      	beq.n	8003a24 <memmove+0x26>
 8003a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a16:	e7f8      	b.n	8003a0a <memmove+0xc>
 8003a18:	4283      	cmp	r3, r0
 8003a1a:	d9f5      	bls.n	8003a08 <memmove+0xa>
 8003a1c:	1881      	adds	r1, r0, r2
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	42d3      	cmn	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memmove+0x28>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a2e:	e7f7      	b.n	8003a20 <memmove+0x22>

08003a30 <_realloc_r>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	4607      	mov	r7, r0
 8003a34:	4614      	mov	r4, r2
 8003a36:	460e      	mov	r6, r1
 8003a38:	b921      	cbnz	r1, 8003a44 <_realloc_r+0x14>
 8003a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a3e:	4611      	mov	r1, r2
 8003a40:	f7ff bc2a 	b.w	8003298 <_malloc_r>
 8003a44:	b922      	cbnz	r2, 8003a50 <_realloc_r+0x20>
 8003a46:	f7ff fbdb 	bl	8003200 <_free_r>
 8003a4a:	4625      	mov	r5, r4
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a50:	f000 f814 	bl	8003a7c <_malloc_usable_size_r>
 8003a54:	42a0      	cmp	r0, r4
 8003a56:	d20f      	bcs.n	8003a78 <_realloc_r+0x48>
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7ff fc1c 	bl	8003298 <_malloc_r>
 8003a60:	4605      	mov	r5, r0
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d0f2      	beq.n	8003a4c <_realloc_r+0x1c>
 8003a66:	4631      	mov	r1, r6
 8003a68:	4622      	mov	r2, r4
 8003a6a:	f7ff ffbd 	bl	80039e8 <memcpy>
 8003a6e:	4631      	mov	r1, r6
 8003a70:	4638      	mov	r0, r7
 8003a72:	f7ff fbc5 	bl	8003200 <_free_r>
 8003a76:	e7e9      	b.n	8003a4c <_realloc_r+0x1c>
 8003a78:	4635      	mov	r5, r6
 8003a7a:	e7e7      	b.n	8003a4c <_realloc_r+0x1c>

08003a7c <_malloc_usable_size_r>:
 8003a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a80:	1f18      	subs	r0, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfbc      	itt	lt
 8003a86:	580b      	ldrlt	r3, [r1, r0]
 8003a88:	18c0      	addlt	r0, r0, r3
 8003a8a:	4770      	bx	lr

08003a8c <_init>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

08003a98 <_fini>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr
