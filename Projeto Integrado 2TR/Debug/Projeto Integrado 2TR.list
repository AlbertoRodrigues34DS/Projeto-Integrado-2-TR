
Projeto Integrado 2TR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002508  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001618  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003c2c  08003c2c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c2c  08003c2c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000084  08003cb8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003cb8  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007822  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164f  00000000  00000000  000278cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  00028f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016f11  00000000  00000000  000295f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000636b  00000000  00000000  00040501  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00081722  00000000  00000000  0004686c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c7f8e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000600  00000000  00000000  000c8010  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001b08  00000000  00000000  000c8610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080025fc 	.word	0x080025fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080025fc 	.word	0x080025fc

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f001 faee 	bl	8001736 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f001 fae2 	bl	8001736 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 fad6 	bl	8001736 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f001 f85c 	bl	8001248 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 face 	bl	8001736 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 fabf 	bl	8001736 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 ff3f 	bl	8002044 <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	2000013c 	.word	0x2000013c

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 faa5 	bl	8001736 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 ff24 	bl	8002044 <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	2000013c 	.word	0x2000013c

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 ffdf 	bl	8001248 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08003ba4 	.word	0x08003ba4
 8000340:	08003be0 	.word	0x08003be0
 8000344:	08003bf0 	.word	0x08003bf0

08000348 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000348:	b082      	sub	sp, #8
 800034a:	b590      	push	{r4, r7, lr}
 800034c:	b089      	sub	sp, #36	; 0x24
 800034e:	af00      	add	r7, sp, #0
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
 8000352:	4603      	mov	r3, r0
 8000354:	80fb      	strh	r3, [r7, #6]
 8000356:	460b      	mov	r3, r1
 8000358:	80bb      	strh	r3, [r7, #4]
 800035a:	4613      	mov	r3, r2
 800035c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	b2d8      	uxtb	r0, r3
 8000362:	88bb      	ldrh	r3, [r7, #4]
 8000364:	b2d9      	uxtb	r1, r3
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	b2da      	uxtb	r2, r3
 800036a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800036e:	4413      	add	r3, r2
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3b01      	subs	r3, #1
 8000374:	b2dc      	uxtb	r4, r3
 8000376:	88bb      	ldrh	r3, [r7, #4]
 8000378:	b2da      	uxtb	r2, r3
 800037a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800037e:	4413      	add	r3, r2
 8000380:	b2db      	uxtb	r3, r3
 8000382:	3b01      	subs	r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4622      	mov	r2, r4
 8000388:	f7ff ff88 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
 8000390:	e043      	b.n	800041a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	3b20      	subs	r3, #32
 8000398:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800039c:	fb01 f303 	mul.w	r3, r1, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	440b      	add	r3, r1
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4413      	add	r3, r2
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
 80003b2:	e029      	b.n	8000408 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	fa02 f303 	lsl.w	r3, r2, r3
 80003bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d00e      	beq.n	80003e2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80003c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003c6:	0a1b      	lsrs	r3, r3, #8
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	743b      	strb	r3, [r7, #16]
 80003ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff fefc 	bl	80001d8 <ST7735_WriteData>
 80003e0:	e00f      	b.n	8000402 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80003e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003e6:	0a1b      	lsrs	r3, r3, #8
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	733b      	strb	r3, [r7, #12]
 80003ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2102      	movs	r1, #2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff feeb 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	3301      	adds	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
 8000408:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800040c:	461a      	mov	r2, r3
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	4293      	cmp	r3, r2
 8000412:	d3cf      	bcc.n	80003b4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	3301      	adds	r3, #1
 8000418:	61fb      	str	r3, [r7, #28]
 800041a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800041e:	461a      	mov	r2, r3
 8000420:	69fb      	ldr	r3, [r7, #28]
 8000422:	4293      	cmp	r3, r2
 8000424:	d3b5      	bcc.n	8000392 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000426:	bf00      	nop
 8000428:	3724      	adds	r7, #36	; 0x24
 800042a:	46bd      	mov	sp, r7
 800042c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000430:	b002      	add	sp, #8
 8000432:	4770      	bx	lr

08000434 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000434:	b082      	sub	sp, #8
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af04      	add	r7, sp, #16
 800043c:	603a      	str	r2, [r7, #0]
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	4603      	mov	r3, r0
 8000442:	80fb      	strh	r3, [r7, #6]
 8000444:	460b      	mov	r3, r1
 8000446:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000448:	f7ff fe80 	bl	800014c <ST7735_Select>

    while(*str) {
 800044c:	e02d      	b.n	80004aa <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	7d3a      	ldrb	r2, [r7, #20]
 8000452:	4413      	add	r3, r2
 8000454:	2b9f      	cmp	r3, #159	; 0x9f
 8000456:	dd13      	ble.n	8000480 <ST7735_WriteString+0x4c>
            x = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800045c:	7d7b      	ldrb	r3, [r7, #21]
 800045e:	b29a      	uxth	r2, r3
 8000460:	88bb      	ldrh	r3, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000466:	88bb      	ldrh	r3, [r7, #4]
 8000468:	7d7a      	ldrb	r2, [r7, #21]
 800046a:	4413      	add	r3, r2
 800046c:	2b4f      	cmp	r3, #79	; 0x4f
 800046e:	dc21      	bgt.n	80004b4 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b20      	cmp	r3, #32
 8000476:	d103      	bne.n	8000480 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	603b      	str	r3, [r7, #0]
                continue;
 800047e:	e014      	b.n	80004aa <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	88b9      	ldrh	r1, [r7, #4]
 8000486:	88f8      	ldrh	r0, [r7, #6]
 8000488:	8c3b      	ldrh	r3, [r7, #32]
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	8bbb      	ldrh	r3, [r7, #28]
 800048e:	9301      	str	r3, [sp, #4]
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	f7ff ff57 	bl	8000348 <ST7735_WriteChar>
        x += font.width;
 800049a:	7d3b      	ldrb	r3, [r7, #20]
 800049c:	b29a      	uxth	r2, r3
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	4413      	add	r3, r2
 80004a2:	80fb      	strh	r3, [r7, #6]
        str++;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1cd      	bne.n	800044e <ST7735_WriteString+0x1a>
 80004b2:	e000      	b.n	80004b6 <ST7735_WriteString+0x82>
                break;
 80004b4:	bf00      	nop
    }

    ST7735_Unselect();
 80004b6:	f7ff fe55 	bl	8000164 <ST7735_Unselect>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004c4:	b002      	add	sp, #8
 80004c6:	4770      	bx	lr

080004c8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4604      	mov	r4, r0
 80004d0:	4608      	mov	r0, r1
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	4623      	mov	r3, r4
 80004d8:	80fb      	strh	r3, [r7, #6]
 80004da:	4603      	mov	r3, r0
 80004dc:	80bb      	strh	r3, [r7, #4]
 80004de:	460b      	mov	r3, r1
 80004e0:	807b      	strh	r3, [r7, #2]
 80004e2:	4613      	mov	r3, r2
 80004e4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	2b9f      	cmp	r3, #159	; 0x9f
 80004ea:	d859      	bhi.n	80005a0 <ST7735_FillRectangle+0xd8>
 80004ec:	88bb      	ldrh	r3, [r7, #4]
 80004ee:	2b4f      	cmp	r3, #79	; 0x4f
 80004f0:	d856      	bhi.n	80005a0 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80004f2:	88fa      	ldrh	r2, [r7, #6]
 80004f4:	887b      	ldrh	r3, [r7, #2]
 80004f6:	4413      	add	r3, r2
 80004f8:	3b01      	subs	r3, #1
 80004fa:	2b9f      	cmp	r3, #159	; 0x9f
 80004fc:	dd03      	ble.n	8000506 <ST7735_FillRectangle+0x3e>
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000504:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000506:	88ba      	ldrh	r2, [r7, #4]
 8000508:	883b      	ldrh	r3, [r7, #0]
 800050a:	4413      	add	r3, r2
 800050c:	3b01      	subs	r3, #1
 800050e:	2b4f      	cmp	r3, #79	; 0x4f
 8000510:	dd03      	ble.n	800051a <ST7735_FillRectangle+0x52>
 8000512:	88bb      	ldrh	r3, [r7, #4]
 8000514:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000518:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800051a:	f7ff fe17 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	b2d8      	uxtb	r0, r3
 8000522:	88bb      	ldrh	r3, [r7, #4]
 8000524:	b2d9      	uxtb	r1, r3
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	b2da      	uxtb	r2, r3
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4413      	add	r3, r2
 8000530:	b2db      	uxtb	r3, r3
 8000532:	3b01      	subs	r3, #1
 8000534:	b2dc      	uxtb	r4, r3
 8000536:	88bb      	ldrh	r3, [r7, #4]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	883b      	ldrh	r3, [r7, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4413      	add	r3, r2
 8000540:	b2db      	uxtb	r3, r3
 8000542:	3b01      	subs	r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4622      	mov	r2, r4
 8000548:	f7ff fea8 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800054c:	8c3b      	ldrh	r3, [r7, #32]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	b29b      	uxth	r3, r3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	733b      	strb	r3, [r7, #12]
 8000556:	8c3b      	ldrh	r3, [r7, #32]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2101      	movs	r1, #1
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <ST7735_FillRectangle+0xe0>)
 8000562:	f001 f8e8 	bl	8001736 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000566:	883b      	ldrh	r3, [r7, #0]
 8000568:	80bb      	strh	r3, [r7, #4]
 800056a:	e013      	b.n	8000594 <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 800056c:	887b      	ldrh	r3, [r7, #2]
 800056e:	80fb      	strh	r3, [r7, #6]
 8000570:	e00a      	b.n	8000588 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000572:	f107 010c 	add.w	r1, r7, #12
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2202      	movs	r2, #2
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <ST7735_FillRectangle+0xe4>)
 800057e:	f001 fd61 	bl	8002044 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	3b01      	subs	r3, #1
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f1      	bne.n	8000572 <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	3b01      	subs	r3, #1
 8000592:	80bb      	strh	r3, [r7, #4]
 8000594:	88bb      	ldrh	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1e8      	bne.n	800056c <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 800059a:	f7ff fde3 	bl	8000164 <ST7735_Unselect>
 800059e:	e000      	b.n	80005a2 <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80005a0:	bf00      	nop
}
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	2000013c 	.word	0x2000013c

080005b0 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4604      	mov	r4, r0
 80005b8:	4608      	mov	r0, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	461a      	mov	r2, r3
 80005be:	4623      	mov	r3, r4
 80005c0:	80fb      	strh	r3, [r7, #6]
 80005c2:	4603      	mov	r3, r0
 80005c4:	80bb      	strh	r3, [r7, #4]
 80005c6:	460b      	mov	r3, r1
 80005c8:	807b      	strh	r3, [r7, #2]
 80005ca:	4613      	mov	r3, r2
 80005cc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2b9f      	cmp	r3, #159	; 0x9f
 80005d2:	d86b      	bhi.n	80006ac <ST7735_FillRectangleFast+0xfc>
 80005d4:	88bb      	ldrh	r3, [r7, #4]
 80005d6:	2b4f      	cmp	r3, #79	; 0x4f
 80005d8:	d868      	bhi.n	80006ac <ST7735_FillRectangleFast+0xfc>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80005da:	88fa      	ldrh	r2, [r7, #6]
 80005dc:	887b      	ldrh	r3, [r7, #2]
 80005de:	4413      	add	r3, r2
 80005e0:	3b01      	subs	r3, #1
 80005e2:	2b9f      	cmp	r3, #159	; 0x9f
 80005e4:	dd03      	ble.n	80005ee <ST7735_FillRectangleFast+0x3e>
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80005ec:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80005ee:	88ba      	ldrh	r2, [r7, #4]
 80005f0:	883b      	ldrh	r3, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	3b01      	subs	r3, #1
 80005f6:	2b4f      	cmp	r3, #79	; 0x4f
 80005f8:	dd03      	ble.n	8000602 <ST7735_FillRectangleFast+0x52>
 80005fa:	88bb      	ldrh	r3, [r7, #4]
 80005fc:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000600:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000602:	f7ff fda3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	b2d8      	uxtb	r0, r3
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	b2d9      	uxtb	r1, r3
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4413      	add	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	3b01      	subs	r3, #1
 800061c:	b2dc      	uxtb	r4, r3
 800061e:	88bb      	ldrh	r3, [r7, #4]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	883b      	ldrh	r3, [r7, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4413      	add	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	3b01      	subs	r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4622      	mov	r2, r4
 8000630:	f7ff fe34 	bl	800029c <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 8000634:	8c3b      	ldrh	r3, [r7, #32]
 8000636:	0a1b      	lsrs	r3, r3, #8
 8000638:	b29b      	uxth	r3, r3
 800063a:	b2db      	uxtb	r3, r3
 800063c:	723b      	strb	r3, [r7, #8]
 800063e:	8c3b      	ldrh	r3, [r7, #32]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ff07 	bl	800245c <malloc>
 800064e:	4603      	mov	r3, r0
 8000650:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 8000652:	2300      	movs	r3, #0
 8000654:	80fb      	strh	r3, [r7, #6]
 8000656:	e008      	b.n	800066a <ST7735_FillRectangleFast+0xba>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	893a      	ldrh	r2, [r7, #8]
 8000662:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	3301      	adds	r3, #1
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	887b      	ldrh	r3, [r7, #2]
 800066e:	429a      	cmp	r2, r3
 8000670:	d3f2      	bcc.n	8000658 <ST7735_FillRectangleFast+0xa8>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	480f      	ldr	r0, [pc, #60]	; (80006b4 <ST7735_FillRectangleFast+0x104>)
 8000678:	f001 f85d 	bl	8001736 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 800067c:	883b      	ldrh	r3, [r7, #0]
 800067e:	80bb      	strh	r3, [r7, #4]
 8000680:	e00b      	b.n	800069a <ST7735_FillRectangleFast+0xea>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000682:	887b      	ldrh	r3, [r7, #2]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	b29a      	uxth	r2, r3
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	68f9      	ldr	r1, [r7, #12]
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <ST7735_FillRectangleFast+0x108>)
 8000690:	f001 fcd8 	bl	8002044 <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	80bb      	strh	r3, [r7, #4]
 800069a:	88bb      	ldrh	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f0      	bne.n	8000682 <ST7735_FillRectangleFast+0xd2>

    free(line);
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f001 fee3 	bl	800246c <free>
    ST7735_Unselect();
 80006a6:	f7ff fd5d 	bl	8000164 <ST7735_Unselect>
 80006aa:	e000      	b.n	80006ae <ST7735_FillRectangleFast+0xfe>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80006ac:	bf00      	nop
}
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd90      	pop	{r4, r7, pc}
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	2000013c 	.word	0x2000013c

080006bc <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2350      	movs	r3, #80	; 0x50
 80006cc:	22a0      	movs	r2, #160	; 0xa0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fef9 	bl	80004c8 <ST7735_FillRectangle>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <ST7735_FillScreenFast>:

void ST7735_FillScreenFast(uint16_t color) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b084      	sub	sp, #16
 80006e2:	af02      	add	r7, sp, #8
 80006e4:	4603      	mov	r3, r0
 80006e6:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80006e8:	88fb      	ldrh	r3, [r7, #6]
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	2350      	movs	r3, #80	; 0x50
 80006ee:	22a0      	movs	r2, #160	; 0xa0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff ff5c 	bl	80005b0 <ST7735_FillRectangleFast>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 fd3e 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f812 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f882 	bl	8000814 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000710:	f000 f84a 	bl	80007a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000714:	f7ff fdfe 	bl	8000314 <ST7735_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // short cor=0;
	   Menu(cor);
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <main+0x2c>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8d9 	bl	80008d4 <Menu>
	   ST7735_FillScreen(BLACK);
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ffca 	bl	80006bc <ST7735_FillScreen>
	   while (1){
 8000728:	e7fe      	b.n	8000728 <main+0x28>
 800072a:	bf00      	nop
 800072c:	20000010 	.word	0x20000010

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b090      	sub	sp, #64	; 0x40
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	2228      	movs	r2, #40	; 0x28
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fe9c 	bl	800247c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	2310      	movs	r3, #16
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fffe 	bl	8001768 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000772:	f000 fbfd 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fa6a 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800079a:	f000 fbe9 	bl	8000f70 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3740      	adds	r7, #64	; 0x40
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2220      	movs	r2, #32
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f001 fb9f 	bl	8001f3c <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 fbb4 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000013c 	.word	0x2000013c
 8000810:	40013000 	.word	0x40013000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_GPIO_Init+0xb4>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xb4>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_GPIO_Init+0xb4>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_GPIO_Init+0xb4>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xb4>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_GPIO_Init+0xb4>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <MX_GPIO_Init+0xb8>)
 800085e:	f000 ff6a 	bl	8001736 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000862:	2200      	movs	r2, #0
 8000864:	217b      	movs	r1, #123	; 0x7b
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000868:	f000 ff65 	bl	8001736 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 800086c:	2310      	movs	r3, #16
 800086e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2302      	movs	r3, #2
 800087a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0xb8>)
 8000884:	f000 fde6 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 8000888:	237b      	movs	r3, #123	; 0x7b
 800088a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_GPIO_Init+0xbc>)
 80008a0:	f000 fdd8 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008a4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xb8>)
 80008ba:	f000 fdcb 	bl	8001454 <HAL_GPIO_Init>

}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <Menu>:

/* USER CODE BEGIN 4 */
short Menu( uint16_t cor){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af04      	add	r7, sp, #16
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(cor);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff feeb 	bl	80006bc <ST7735_FillScreen>
	int escolha=0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
	ST7735_WriteString(13, 0,"Campo Minado",Font_11x18, BLACK, BLUE );
 80008ea:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <Menu+0x190>)
 80008ec:	221f      	movs	r2, #31
 80008ee:	9202      	str	r2, [sp, #8]
 80008f0:	2200      	movs	r2, #0
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a5b      	ldr	r2, [pc, #364]	; (8000a68 <Menu+0x194>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	200d      	movs	r0, #13
 8000900:	f7ff fd98 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 30,"P9-Jogar!",Font_7x10, BLACK, BLUE );
 8000904:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <Menu+0x198>)
 8000906:	221f      	movs	r2, #31
 8000908:	9202      	str	r2, [sp, #8]
 800090a:	2200      	movs	r2, #0
 800090c:	9201      	str	r2, [sp, #4]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	9200      	str	r2, [sp, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a56      	ldr	r2, [pc, #344]	; (8000a70 <Menu+0x19c>)
 8000916:	211e      	movs	r1, #30
 8000918:	201e      	movs	r0, #30
 800091a:	f7ff fd8b 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 45,"P10-Dificuldade:",Font_7x10, BLACK, BLUE );
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <Menu+0x198>)
 8000920:	221f      	movs	r2, #31
 8000922:	9202      	str	r2, [sp, #8]
 8000924:	2200      	movs	r2, #0
 8000926:	9201      	str	r2, [sp, #4]
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	9200      	str	r2, [sp, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a51      	ldr	r2, [pc, #324]	; (8000a74 <Menu+0x1a0>)
 8000930:	212d      	movs	r1, #45	; 0x2d
 8000932:	201e      	movs	r0, #30
 8000934:	f7ff fd7e 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 60,"P11-Cores:",Font_7x10, BLACK, BLUE );
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <Menu+0x198>)
 800093a:	221f      	movs	r2, #31
 800093c:	9202      	str	r2, [sp, #8]
 800093e:	2200      	movs	r2, #0
 8000940:	9201      	str	r2, [sp, #4]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	9200      	str	r2, [sp, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <Menu+0x1a4>)
 800094a:	213c      	movs	r1, #60	; 0x3c
 800094c:	201e      	movs	r0, #30
 800094e:	f7ff fd71 	bl	8000434 <ST7735_WriteString>


	while(escolha==0){
 8000952:	e067      	b.n	8000a24 <Menu+0x150>
    	if (BOTAO9 == 0 && BOTAO10 == 1 && BOTAO11 == 1 && BOTAO12 == 1) {
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	4848      	ldr	r0, [pc, #288]	; (8000a7c <Menu+0x1a8>)
 800095a:	f000 fed5 	bl	8001708 <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11a      	bne.n	800099a <Menu+0xc6>
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	4844      	ldr	r0, [pc, #272]	; (8000a7c <Menu+0x1a8>)
 800096a:	f000 fecd 	bl	8001708 <HAL_GPIO_ReadPin>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d112      	bne.n	800099a <Menu+0xc6>
 8000974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000978:	4840      	ldr	r0, [pc, #256]	; (8000a7c <Menu+0x1a8>)
 800097a:	f000 fec5 	bl	8001708 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10a      	bne.n	800099a <Menu+0xc6>
 8000984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000988:	483c      	ldr	r0, [pc, #240]	; (8000a7c <Menu+0x1a8>)
 800098a:	f000 febd 	bl	8001708 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d102      	bne.n	800099a <Menu+0xc6>
    	escolha=1;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e044      	b.n	8000a24 <Menu+0x150>
    	}
    	else if (BOTAO9 == 1 && BOTAO10 == 0 && BOTAO11 == 1 && BOTAO12 == 1) {
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4837      	ldr	r0, [pc, #220]	; (8000a7c <Menu+0x1a8>)
 80009a0:	f000 feb2 	bl	8001708 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d11a      	bne.n	80009e0 <Menu+0x10c>
 80009aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ae:	4833      	ldr	r0, [pc, #204]	; (8000a7c <Menu+0x1a8>)
 80009b0:	f000 feaa 	bl	8001708 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d112      	bne.n	80009e0 <Menu+0x10c>
 80009ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009be:	482f      	ldr	r0, [pc, #188]	; (8000a7c <Menu+0x1a8>)
 80009c0:	f000 fea2 	bl	8001708 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d10a      	bne.n	80009e0 <Menu+0x10c>
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	482b      	ldr	r0, [pc, #172]	; (8000a7c <Menu+0x1a8>)
 80009d0:	f000 fe9a 	bl	8001708 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <Menu+0x10c>
    	    	    escolha=2;
 80009da:	2302      	movs	r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e021      	b.n	8000a24 <Menu+0x150>
    	    	  }

	else if (BOTAO9 == 1 && BOTAO10 == 1 && BOTAO11 == 0 && BOTAO12 == 1) {
 80009e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <Menu+0x1a8>)
 80009e6:	f000 fe8f 	bl	8001708 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d119      	bne.n	8000a24 <Menu+0x150>
 80009f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f4:	4821      	ldr	r0, [pc, #132]	; (8000a7c <Menu+0x1a8>)
 80009f6:	f000 fe87 	bl	8001708 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d111      	bne.n	8000a24 <Menu+0x150>
 8000a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <Menu+0x1a8>)
 8000a06:	f000 fe7f 	bl	8001708 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <Menu+0x150>
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	4819      	ldr	r0, [pc, #100]	; (8000a7c <Menu+0x1a8>)
 8000a16:	f000 fe77 	bl	8001708 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d101      	bne.n	8000a24 <Menu+0x150>
	    	    	    escolha=3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	60fb      	str	r3, [r7, #12]
	while(escolha==0){
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d094      	beq.n	8000954 <Menu+0x80>
	    	    	  }
		}

	switch (escolha) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d006      	beq.n	8000a3e <Menu+0x16a>
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d009      	beq.n	8000a48 <Menu+0x174>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d110      	bne.n	8000a5a <Menu+0x186>
			case 1:
		    Jogo();
 8000a38:	f000 f822 	bl	8000a80 <Jogo>
			break;
 8000a3c:	e00d      	b.n	8000a5a <Menu+0x186>

			case 2:
			DificuldadeLed(cor);
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f9f7 	bl	8000e34 <DificuldadeLed>
			break;
 8000a46:	e008      	b.n	8000a5a <Menu+0x186>

			case 3:
			MudarCor(cor);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f820 	bl	8000a90 <MudarCor>
			Menu(cor);
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff3e 	bl	80008d4 <Menu>
			break;
 8000a58:	bf00      	nop
		}


	}
 8000a5a:	bf00      	nop
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000008 	.word	0x20000008
 8000a68:	08002614 	.word	0x08002614
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	08002624 	.word	0x08002624
 8000a74:	08002630 	.word	0x08002630
 8000a78:	08002644 	.word	0x08002644
 8000a7c:	40010800 	.word	0x40010800

08000a80 <Jogo>:

short Jogo(void){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
//int bomba= rand() % 1 (camp[6][6]);

}
 8000a84:	bf00      	nop
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <MudarCor>:
short MudarCor(uint16_t cor)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af04      	add	r7, sp, #16
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
	ST7735_FillScreen(cor);
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe0d 	bl	80006bc <ST7735_FillScreen>
		short escolhacor=0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	81fb      	strh	r3, [r7, #14]
		ST7735_WriteString(13, 0, "Tabela de cores",Font_7x10, BLACK, BLUE );
 8000aa6:	4b8a      	ldr	r3, [pc, #552]	; (8000cd0 <MudarCor+0x240>)
 8000aa8:	221f      	movs	r2, #31
 8000aaa:	9202      	str	r2, [sp, #8]
 8000aac:	2200      	movs	r2, #0
 8000aae:	9201      	str	r2, [sp, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	9200      	str	r2, [sp, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a87      	ldr	r2, [pc, #540]	; (8000cd4 <MudarCor+0x244>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	200d      	movs	r0, #13
 8000abc:	f7ff fcba 	bl	8000434 <ST7735_WriteString>
		ST7735_WriteString(30, 15, "P9-Verde",Font_7x10, BLACK, BLUE );
 8000ac0:	4b83      	ldr	r3, [pc, #524]	; (8000cd0 <MudarCor+0x240>)
 8000ac2:	221f      	movs	r2, #31
 8000ac4:	9202      	str	r2, [sp, #8]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	9201      	str	r2, [sp, #4]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	9200      	str	r2, [sp, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a81      	ldr	r2, [pc, #516]	; (8000cd8 <MudarCor+0x248>)
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	201e      	movs	r0, #30
 8000ad6:	f7ff fcad 	bl	8000434 <ST7735_WriteString>
		ST7735_WriteString(30, 30, "PA10-Magenta",Font_7x10, BLACK, BLUE );
 8000ada:	4b7d      	ldr	r3, [pc, #500]	; (8000cd0 <MudarCor+0x240>)
 8000adc:	221f      	movs	r2, #31
 8000ade:	9202      	str	r2, [sp, #8]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	9201      	str	r2, [sp, #4]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	9200      	str	r2, [sp, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a7c      	ldr	r2, [pc, #496]	; (8000cdc <MudarCor+0x24c>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	201e      	movs	r0, #30
 8000af0:	f7ff fca0 	bl	8000434 <ST7735_WriteString>
		ST7735_WriteString(30, 60, "P11-Azul",Font_7x10, BLACK, BLUE );
 8000af4:	4b76      	ldr	r3, [pc, #472]	; (8000cd0 <MudarCor+0x240>)
 8000af6:	221f      	movs	r2, #31
 8000af8:	9202      	str	r2, [sp, #8]
 8000afa:	2200      	movs	r2, #0
 8000afc:	9201      	str	r2, [sp, #4]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	9200      	str	r2, [sp, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a76      	ldr	r2, [pc, #472]	; (8000ce0 <MudarCor+0x250>)
 8000b06:	213c      	movs	r1, #60	; 0x3c
 8000b08:	201e      	movs	r0, #30
 8000b0a:	f7ff fc93 	bl	8000434 <ST7735_WriteString>
		ST7735_WriteString(30, 45, "P12-Voltar",Font_7x10, BLACK, BLUE );
 8000b0e:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <MudarCor+0x240>)
 8000b10:	221f      	movs	r2, #31
 8000b12:	9202      	str	r2, [sp, #8]
 8000b14:	2200      	movs	r2, #0
 8000b16:	9201      	str	r2, [sp, #4]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	9200      	str	r2, [sp, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a71      	ldr	r2, [pc, #452]	; (8000ce4 <MudarCor+0x254>)
 8000b20:	212d      	movs	r1, #45	; 0x2d
 8000b22:	201e      	movs	r0, #30
 8000b24:	f7ff fc86 	bl	8000434 <ST7735_WriteString>

		while(escolhacor==0){
 8000b28:	e16c      	b.n	8000e04 <MudarCor+0x374>


			if (BOTAO9 == 0 && BOTAO10 == 1 && BOTAO11 == 1 && BOTAO12 == 1) {
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	486e      	ldr	r0, [pc, #440]	; (8000ce8 <MudarCor+0x258>)
 8000b30:	f000 fdea 	bl	8001708 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d160      	bne.n	8000bfc <MudarCor+0x16c>
 8000b3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3e:	486a      	ldr	r0, [pc, #424]	; (8000ce8 <MudarCor+0x258>)
 8000b40:	f000 fde2 	bl	8001708 <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d158      	bne.n	8000bfc <MudarCor+0x16c>
 8000b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4e:	4866      	ldr	r0, [pc, #408]	; (8000ce8 <MudarCor+0x258>)
 8000b50:	f000 fdda 	bl	8001708 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d150      	bne.n	8000bfc <MudarCor+0x16c>
 8000b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5e:	4862      	ldr	r0, [pc, #392]	; (8000ce8 <MudarCor+0x258>)
 8000b60:	f000 fdd2 	bl	8001708 <HAL_GPIO_ReadPin>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d148      	bne.n	8000bfc <MudarCor+0x16c>
				cor=GREEN;
 8000b6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b6e:	80fb      	strh	r3, [r7, #6]
				ST7735_FillScreenFast(cor);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fdb3 	bl	80006de <ST7735_FillScreenFast>
				ST7735_WriteString(13, 0, "Tabela de cores",Font_7x10, BLACK, BLUE );
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <MudarCor+0x240>)
 8000b7a:	221f      	movs	r2, #31
 8000b7c:	9202      	str	r2, [sp, #8]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	9201      	str	r2, [sp, #4]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a52      	ldr	r2, [pc, #328]	; (8000cd4 <MudarCor+0x244>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	200d      	movs	r0, #13
 8000b8e:	f7ff fc51 	bl	8000434 <ST7735_WriteString>
				ST7735_WriteString(30, 15, "P9-Verde",Font_7x10, BLACK, BLUE );
 8000b92:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <MudarCor+0x240>)
 8000b94:	221f      	movs	r2, #31
 8000b96:	9202      	str	r2, [sp, #8]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a4d      	ldr	r2, [pc, #308]	; (8000cd8 <MudarCor+0x248>)
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	201e      	movs	r0, #30
 8000ba8:	f7ff fc44 	bl	8000434 <ST7735_WriteString>
				ST7735_WriteString(30, 30, "PA10-Magenta",Font_7x10, BLACK, BLUE );
 8000bac:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <MudarCor+0x240>)
 8000bae:	221f      	movs	r2, #31
 8000bb0:	9202      	str	r2, [sp, #8]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	9201      	str	r2, [sp, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	9200      	str	r2, [sp, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <MudarCor+0x24c>)
 8000bbe:	211e      	movs	r1, #30
 8000bc0:	201e      	movs	r0, #30
 8000bc2:	f7ff fc37 	bl	8000434 <ST7735_WriteString>
				ST7735_WriteString(30, 45, "P11-Azul",Font_7x10, BLACK, BLUE );
 8000bc6:	4b42      	ldr	r3, [pc, #264]	; (8000cd0 <MudarCor+0x240>)
 8000bc8:	221f      	movs	r2, #31
 8000bca:	9202      	str	r2, [sp, #8]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	9201      	str	r2, [sp, #4]
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	9200      	str	r2, [sp, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a42      	ldr	r2, [pc, #264]	; (8000ce0 <MudarCor+0x250>)
 8000bd8:	212d      	movs	r1, #45	; 0x2d
 8000bda:	201e      	movs	r0, #30
 8000bdc:	f7ff fc2a 	bl	8000434 <ST7735_WriteString>
				ST7735_WriteString(30, 60, "P12-Voltar",Font_7x10, BLACK, BLUE );
 8000be0:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <MudarCor+0x240>)
 8000be2:	221f      	movs	r2, #31
 8000be4:	9202      	str	r2, [sp, #8]
 8000be6:	2200      	movs	r2, #0
 8000be8:	9201      	str	r2, [sp, #4]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	9200      	str	r2, [sp, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <MudarCor+0x254>)
 8000bf2:	213c      	movs	r1, #60	; 0x3c
 8000bf4:	201e      	movs	r0, #30
 8000bf6:	f7ff fc1d 	bl	8000434 <ST7735_WriteString>
 8000bfa:	e103      	b.n	8000e04 <MudarCor+0x374>

			    	}
			    	else if (BOTAO9 == 1 && BOTAO10 == 0 && BOTAO11 == 1 && BOTAO12 == 1) {
 8000bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c00:	4839      	ldr	r0, [pc, #228]	; (8000ce8 <MudarCor+0x258>)
 8000c02:	f000 fd81 	bl	8001708 <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d16f      	bne.n	8000cec <MudarCor+0x25c>
 8000c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <MudarCor+0x258>)
 8000c12:	f000 fd79 	bl	8001708 <HAL_GPIO_ReadPin>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d167      	bne.n	8000cec <MudarCor+0x25c>
 8000c1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c20:	4831      	ldr	r0, [pc, #196]	; (8000ce8 <MudarCor+0x258>)
 8000c22:	f000 fd71 	bl	8001708 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d15f      	bne.n	8000cec <MudarCor+0x25c>
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	482d      	ldr	r0, [pc, #180]	; (8000ce8 <MudarCor+0x258>)
 8000c32:	f000 fd69 	bl	8001708 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d157      	bne.n	8000cec <MudarCor+0x25c>
			    	    cor=MAGENTA;
 8000c3c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000c40:	80fb      	strh	r3, [r7, #6]
			    	    ST7735_FillScreenFast(cor);
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fd4a 	bl	80006de <ST7735_FillScreenFast>
			    	    ST7735_WriteString(13, 0, "Tabela de cores",Font_7x10, BLACK, BLUE );
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MudarCor+0x240>)
 8000c4c:	221f      	movs	r2, #31
 8000c4e:	9202      	str	r2, [sp, #8]
 8000c50:	2200      	movs	r2, #0
 8000c52:	9201      	str	r2, [sp, #4]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <MudarCor+0x244>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200d      	movs	r0, #13
 8000c60:	f7ff fbe8 	bl	8000434 <ST7735_WriteString>
						ST7735_WriteString(30, 15, "P9-Verde",Font_7x10, BLACK, BLUE );
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MudarCor+0x240>)
 8000c66:	221f      	movs	r2, #31
 8000c68:	9202      	str	r2, [sp, #8]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	9201      	str	r2, [sp, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	9200      	str	r2, [sp, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <MudarCor+0x248>)
 8000c76:	210f      	movs	r1, #15
 8000c78:	201e      	movs	r0, #30
 8000c7a:	f7ff fbdb 	bl	8000434 <ST7735_WriteString>
		  				ST7735_WriteString(30, 30, "PA10-Magenta",Font_7x10, BLACK, BLUE );
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MudarCor+0x240>)
 8000c80:	221f      	movs	r2, #31
 8000c82:	9202      	str	r2, [sp, #8]
 8000c84:	2200      	movs	r2, #0
 8000c86:	9201      	str	r2, [sp, #4]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	9200      	str	r2, [sp, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MudarCor+0x24c>)
 8000c90:	211e      	movs	r1, #30
 8000c92:	201e      	movs	r0, #30
 8000c94:	f7ff fbce 	bl	8000434 <ST7735_WriteString>
 	    				ST7735_WriteString(30, 45, "P11-Azul",Font_7x10, BLACK, BLUE );
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MudarCor+0x240>)
 8000c9a:	221f      	movs	r2, #31
 8000c9c:	9202      	str	r2, [sp, #8]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	9201      	str	r2, [sp, #4]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <MudarCor+0x250>)
 8000caa:	212d      	movs	r1, #45	; 0x2d
 8000cac:	201e      	movs	r0, #30
 8000cae:	f7ff fbc1 	bl	8000434 <ST7735_WriteString>
	    				ST7735_WriteString(30, 60, "P12-Voltar",Font_7x10, BLACK, BLUE );
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MudarCor+0x240>)
 8000cb4:	221f      	movs	r2, #31
 8000cb6:	9202      	str	r2, [sp, #8]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	9201      	str	r2, [sp, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	9200      	str	r2, [sp, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <MudarCor+0x254>)
 8000cc4:	213c      	movs	r1, #60	; 0x3c
 8000cc6:	201e      	movs	r0, #30
 8000cc8:	f7ff fbb4 	bl	8000434 <ST7735_WriteString>
 8000ccc:	e09a      	b.n	8000e04 <MudarCor+0x374>
 8000cce:	bf00      	nop
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	08002650 	.word	0x08002650
 8000cd8:	08002660 	.word	0x08002660
 8000cdc:	0800266c 	.word	0x0800266c
 8000ce0:	0800267c 	.word	0x0800267c
 8000ce4:	08002688 	.word	0x08002688
 8000ce8:	40010800 	.word	0x40010800
			    	    	  }

				else if (BOTAO9 == 1 && BOTAO10 == 1 && BOTAO11 == 0 && BOTAO12 == 1) {
 8000cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf0:	4849      	ldr	r0, [pc, #292]	; (8000e18 <MudarCor+0x388>)
 8000cf2:	f000 fd09 	bl	8001708 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d15f      	bne.n	8000dbc <MudarCor+0x32c>
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	4845      	ldr	r0, [pc, #276]	; (8000e18 <MudarCor+0x388>)
 8000d02:	f000 fd01 	bl	8001708 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d157      	bne.n	8000dbc <MudarCor+0x32c>
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	4841      	ldr	r0, [pc, #260]	; (8000e18 <MudarCor+0x388>)
 8000d12:	f000 fcf9 	bl	8001708 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d14f      	bne.n	8000dbc <MudarCor+0x32c>
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	483d      	ldr	r0, [pc, #244]	; (8000e18 <MudarCor+0x388>)
 8000d22:	f000 fcf1 	bl	8001708 <HAL_GPIO_ReadPin>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d147      	bne.n	8000dbc <MudarCor+0x32c>
					cor=BLUE;
 8000d2c:	231f      	movs	r3, #31
 8000d2e:	80fb      	strh	r3, [r7, #6]
					ST7735_FillScreenFast(cor);
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fcd3 	bl	80006de <ST7735_FillScreenFast>
					ST7735_WriteString(13, 0, "Tabela de cores",Font_7x10, BLACK, BLUE );
 8000d38:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <MudarCor+0x38c>)
 8000d3a:	221f      	movs	r2, #31
 8000d3c:	9202      	str	r2, [sp, #8]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	9201      	str	r2, [sp, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	9200      	str	r2, [sp, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a35      	ldr	r2, [pc, #212]	; (8000e20 <MudarCor+0x390>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	200d      	movs	r0, #13
 8000d4e:	f7ff fb71 	bl	8000434 <ST7735_WriteString>
					ST7735_WriteString(30, 15, "P9-Verde",Font_7x10, BLACK, BLUE );
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <MudarCor+0x38c>)
 8000d54:	221f      	movs	r2, #31
 8000d56:	9202      	str	r2, [sp, #8]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	9201      	str	r2, [sp, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MudarCor+0x394>)
 8000d64:	210f      	movs	r1, #15
 8000d66:	201e      	movs	r0, #30
 8000d68:	f7ff fb64 	bl	8000434 <ST7735_WriteString>
			  		ST7735_WriteString(30, 30, "PA10-Magenta",Font_7x10, BLACK, BLUE );
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <MudarCor+0x38c>)
 8000d6e:	221f      	movs	r2, #31
 8000d70:	9202      	str	r2, [sp, #8]
 8000d72:	2200      	movs	r2, #0
 8000d74:	9201      	str	r2, [sp, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	9200      	str	r2, [sp, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <MudarCor+0x398>)
 8000d7e:	211e      	movs	r1, #30
 8000d80:	201e      	movs	r0, #30
 8000d82:	f7ff fb57 	bl	8000434 <ST7735_WriteString>
					ST7735_WriteString(30, 45, "P11-Azul",Font_7x10, BLACK, BLUE );
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <MudarCor+0x38c>)
 8000d88:	221f      	movs	r2, #31
 8000d8a:	9202      	str	r2, [sp, #8]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	9201      	str	r2, [sp, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	9200      	str	r2, [sp, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a25      	ldr	r2, [pc, #148]	; (8000e2c <MudarCor+0x39c>)
 8000d98:	212d      	movs	r1, #45	; 0x2d
 8000d9a:	201e      	movs	r0, #30
 8000d9c:	f7ff fb4a 	bl	8000434 <ST7735_WriteString>
					ST7735_WriteString(30, 60, "P12-Voltar",Font_7x10, BLACK, BLUE );
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MudarCor+0x38c>)
 8000da2:	221f      	movs	r2, #31
 8000da4:	9202      	str	r2, [sp, #8]
 8000da6:	2200      	movs	r2, #0
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <MudarCor+0x3a0>)
 8000db2:	213c      	movs	r1, #60	; 0x3c
 8000db4:	201e      	movs	r0, #30
 8000db6:	f7ff fb3d 	bl	8000434 <ST7735_WriteString>
 8000dba:	e023      	b.n	8000e04 <MudarCor+0x374>
				    	    	  }
				else if(BOTAO9 == 1 && BOTAO10 == 1 && BOTAO11 == 1 && BOTAO12 == 0){
 8000dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <MudarCor+0x388>)
 8000dc2:	f000 fca1 	bl	8001708 <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d11b      	bne.n	8000e04 <MudarCor+0x374>
 8000dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd0:	4811      	ldr	r0, [pc, #68]	; (8000e18 <MudarCor+0x388>)
 8000dd2:	f000 fc99 	bl	8001708 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d113      	bne.n	8000e04 <MudarCor+0x374>
 8000ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MudarCor+0x388>)
 8000de2:	f000 fc91 	bl	8001708 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d10b      	bne.n	8000e04 <MudarCor+0x374>
 8000dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df0:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MudarCor+0x388>)
 8000df2:	f000 fc89 	bl	8001708 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d103      	bne.n	8000e04 <MudarCor+0x374>
					Menu(cor);
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fd68 	bl	80008d4 <Menu>
		while(escolhacor==0){
 8000e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f43f ae8e 	beq.w	8000b2a <MudarCor+0x9a>
				}
		}

}
 8000e0e:	bf00      	nop
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	08002650 	.word	0x08002650
 8000e24:	08002660 	.word	0x08002660
 8000e28:	0800266c 	.word	0x0800266c
 8000e2c:	0800267c 	.word	0x0800267c
 8000e30:	08002688 	.word	0x08002688

08000e34 <DificuldadeLed>:
short DificuldadeLed(uint16_t cor){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af04      	add	r7, sp, #16
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	int escolhadificuldade=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]

	ST7735_FillScreenFast(cor);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fc4a 	bl	80006de <ST7735_FillScreenFast>
	ST7735_WriteString(13, 0, "Escolha o nivel",Font_7x10, BLACK, BLUE );
 8000e4a:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <DificuldadeLed+0x11c>)
 8000e4c:	221f      	movs	r2, #31
 8000e4e:	9202      	str	r2, [sp, #8]
 8000e50:	2200      	movs	r2, #0
 8000e52:	9201      	str	r2, [sp, #4]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	9200      	str	r2, [sp, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	; (8000f54 <DificuldadeLed+0x120>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200d      	movs	r0, #13
 8000e60:	f7ff fae8 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 15, "P9-Facil",Font_7x10, BLACK, BLUE );
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <DificuldadeLed+0x11c>)
 8000e66:	221f      	movs	r2, #31
 8000e68:	9202      	str	r2, [sp, #8]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	9201      	str	r2, [sp, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	9200      	str	r2, [sp, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a38      	ldr	r2, [pc, #224]	; (8000f58 <DificuldadeLed+0x124>)
 8000e76:	210f      	movs	r1, #15
 8000e78:	201e      	movs	r0, #30
 8000e7a:	f7ff fadb 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 30, "PA10-Medio",Font_7x10, BLACK, BLUE );
 8000e7e:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <DificuldadeLed+0x11c>)
 8000e80:	221f      	movs	r2, #31
 8000e82:	9202      	str	r2, [sp, #8]
 8000e84:	2200      	movs	r2, #0
 8000e86:	9201      	str	r2, [sp, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a33      	ldr	r2, [pc, #204]	; (8000f5c <DificuldadeLed+0x128>)
 8000e90:	211e      	movs	r1, #30
 8000e92:	201e      	movs	r0, #30
 8000e94:	f7ff face 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 45, "P11-Dficil",Font_7x10, BLACK, BLUE );
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <DificuldadeLed+0x11c>)
 8000e9a:	221f      	movs	r2, #31
 8000e9c:	9202      	str	r2, [sp, #8]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	9201      	str	r2, [sp, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2d      	ldr	r2, [pc, #180]	; (8000f60 <DificuldadeLed+0x12c>)
 8000eaa:	212d      	movs	r1, #45	; 0x2d
 8000eac:	201e      	movs	r0, #30
 8000eae:	f7ff fac1 	bl	8000434 <ST7735_WriteString>
	ST7735_WriteString(30, 60, "P12-Voltar",Font_7x10, BLACK, BLUE );
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <DificuldadeLed+0x11c>)
 8000eb4:	221f      	movs	r2, #31
 8000eb6:	9202      	str	r2, [sp, #8]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	9201      	str	r2, [sp, #4]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	9200      	str	r2, [sp, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <DificuldadeLed+0x130>)
 8000ec4:	213c      	movs	r1, #60	; 0x3c
 8000ec6:	201e      	movs	r0, #30
 8000ec8:	f7ff fab4 	bl	8000434 <ST7735_WriteString>

	while(escolhadificuldade==0){
 8000ecc:	e037      	b.n	8000f3e <DificuldadeLed+0x10a>
	if(BOTAO9==0){
 8000ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed2:	4825      	ldr	r0, [pc, #148]	; (8000f68 <DificuldadeLed+0x134>)
 8000ed4:	f000 fc18 	bl	8001708 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <DificuldadeLed+0xb6>
	LED6_LIGA;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4822      	ldr	r0, [pc, #136]	; (8000f6c <DificuldadeLed+0x138>)
 8000ee4:	f000 fc27 	bl	8001736 <HAL_GPIO_WritePin>
 8000ee8:	e029      	b.n	8000f3e <DificuldadeLed+0x10a>
}
	else if(BOTAO10==0){
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	481e      	ldr	r0, [pc, #120]	; (8000f68 <DificuldadeLed+0x134>)
 8000ef0:	f000 fc0a 	bl	8001708 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10a      	bne.n	8000f10 <DificuldadeLed+0xdc>
		LED6_LIGA;
 8000efa:	2201      	movs	r2, #1
 8000efc:	2140      	movs	r1, #64	; 0x40
 8000efe:	481b      	ldr	r0, [pc, #108]	; (8000f6c <DificuldadeLed+0x138>)
 8000f00:	f000 fc19 	bl	8001736 <HAL_GPIO_WritePin>
		LED5_LIGA;
 8000f04:	2201      	movs	r2, #1
 8000f06:	2120      	movs	r1, #32
 8000f08:	4818      	ldr	r0, [pc, #96]	; (8000f6c <DificuldadeLed+0x138>)
 8000f0a:	f000 fc14 	bl	8001736 <HAL_GPIO_WritePin>
 8000f0e:	e016      	b.n	8000f3e <DificuldadeLed+0x10a>
	}
	else if(BOTAO11==0){
 8000f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f14:	4814      	ldr	r0, [pc, #80]	; (8000f68 <DificuldadeLed+0x134>)
 8000f16:	f000 fbf7 	bl	8001708 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10e      	bne.n	8000f3e <DificuldadeLed+0x10a>
	LED6_LIGA;
 8000f20:	2201      	movs	r2, #1
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <DificuldadeLed+0x138>)
 8000f26:	f000 fc06 	bl	8001736 <HAL_GPIO_WritePin>
	LED5_LIGA;
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	480f      	ldr	r0, [pc, #60]	; (8000f6c <DificuldadeLed+0x138>)
 8000f30:	f000 fc01 	bl	8001736 <HAL_GPIO_WritePin>
	LED4_LIGA;
 8000f34:	2201      	movs	r2, #1
 8000f36:	2110      	movs	r1, #16
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <DificuldadeLed+0x138>)
 8000f3a:	f000 fbfc 	bl	8001736 <HAL_GPIO_WritePin>
	while(escolhadificuldade==0){
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0c4      	beq.n	8000ece <DificuldadeLed+0x9a>
	}
}
}
 8000f44:	bf00      	nop
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	08002694 	.word	0x08002694
 8000f58:	080026a4 	.word	0x080026a4
 8000f5c:	080026b0 	.word	0x080026b0
 8000f60:	080026bc 	.word	0x080026bc
 8000f64:	08002688 	.word	0x08002688
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40010c00 	.word	0x40010c00

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <Error_Handler+0x6>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_MspInit+0x60>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_MspInit+0x60>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000

08000fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d12f      	bne.n	800105c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800102c:	23a0      	movs	r3, #160	; 0xa0
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_SPI_MspInit+0x90>)
 8001040:	f000 fa08 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001044:	2340      	movs	r3, #64	; 0x40
 8001046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_SPI_MspInit+0x90>)
 8001058:	f000 f9fc 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40013000 	.word	0x40013000
 8001068:	40021000 	.word	0x40021000
 800106c:	40010800 	.word	0x40010800

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 f8ab 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f001 f98a 	bl	8002408 <__errno>
 80010f4:	4602      	mov	r2, r0
 80010f6:	230c      	movs	r3, #12
 80010f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20005000 	.word	0x20005000
 8001120:	00000400 	.word	0x00000400
 8001124:	200000a0 	.word	0x200000a0
 8001128:	200001a0 	.word	0x200001a0

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115e:	f7ff ffe5 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f001 f957 	bl	8002414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001166:	f7ff facb 	bl	8000700 <main>
  bx lr
 800116a:	4770      	bx	lr
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001174:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8001178:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800117c:	2000019c 	.word	0x2000019c

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x28>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x28>)
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f929 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff feea 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f933 	bl	800143a <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f909 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000014 	.word	0x20000014
 8001208:	2000001c 	.word	0x2000001c
 800120c:	20000018 	.word	0x20000018

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x20>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <HAL_IncTick+0x20>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	2000001c 	.word	0x2000001c
 8001230:	20000194 	.word	0x20000194

08001234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <HAL_GetTick+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000194 	.word	0x20000194

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fff0 	bl	8001234 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_Delay+0x40>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffe0 	bl	8001234 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000001c 	.word	0x2000001c

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff90 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff49 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff5e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffb0 	bl	80013a8 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e127      	b.n	80016b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001468:	2201      	movs	r2, #1
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8116 	bne.w	80016b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b12      	cmp	r3, #18
 800148c:	d034      	beq.n	80014f8 <HAL_GPIO_Init+0xa4>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d80d      	bhi.n	80014ae <HAL_GPIO_Init+0x5a>
 8001492:	2b02      	cmp	r3, #2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x9a>
 8001496:	2b02      	cmp	r3, #2
 8001498:	d804      	bhi.n	80014a4 <HAL_GPIO_Init+0x50>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d031      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d01c      	beq.n	80014dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e048      	b.n	8001536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d043      	beq.n	8001530 <HAL_GPIO_Init+0xdc>
 80014a8:	2b11      	cmp	r3, #17
 80014aa:	d01b      	beq.n	80014e4 <HAL_GPIO_Init+0x90>
          break;
 80014ac:	e043      	b.n	8001536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ae:	4a89      	ldr	r2, [pc, #548]	; (80016d4 <HAL_GPIO_Init+0x280>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d026      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014b4:	4a87      	ldr	r2, [pc, #540]	; (80016d4 <HAL_GPIO_Init+0x280>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d806      	bhi.n	80014c8 <HAL_GPIO_Init+0x74>
 80014ba:	4a87      	ldr	r2, [pc, #540]	; (80016d8 <HAL_GPIO_Init+0x284>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d020      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014c0:	4a86      	ldr	r2, [pc, #536]	; (80016dc <HAL_GPIO_Init+0x288>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01d      	beq.n	8001502 <HAL_GPIO_Init+0xae>
          break;
 80014c6:	e036      	b.n	8001536 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014c8:	4a85      	ldr	r2, [pc, #532]	; (80016e0 <HAL_GPIO_Init+0x28c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014ce:	4a85      	ldr	r2, [pc, #532]	; (80016e4 <HAL_GPIO_Init+0x290>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d016      	beq.n	8001502 <HAL_GPIO_Init+0xae>
 80014d4:	4a84      	ldr	r2, [pc, #528]	; (80016e8 <HAL_GPIO_Init+0x294>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0xae>
          break;
 80014da:	e02c      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e028      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	3304      	adds	r3, #4
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e023      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	3308      	adds	r3, #8
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e01e      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	330c      	adds	r3, #12
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e019      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150a:	2304      	movs	r3, #4
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e012      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	611a      	str	r2, [r3, #16]
          break;
 8001522:	e008      	b.n	8001536 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001524:	2308      	movs	r3, #8
 8001526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	615a      	str	r2, [r3, #20]
          break;
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2bff      	cmp	r3, #255	; 0xff
 800153a:	d801      	bhi.n	8001540 <HAL_GPIO_Init+0xec>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e001      	b.n	8001544 <HAL_GPIO_Init+0xf0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2bff      	cmp	r3, #255	; 0xff
 800154a:	d802      	bhi.n	8001552 <HAL_GPIO_Init+0xfe>
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x104>
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	3b08      	subs	r3, #8
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	210f      	movs	r1, #15
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	6a39      	ldr	r1, [r7, #32]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	431a      	orrs	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8096 	beq.w	80016b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001586:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_GPIO_Init+0x298>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_GPIO_Init+0x298>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_GPIO_Init+0x298>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800159e:	4a54      	ldr	r2, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x29c>)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x19e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4a      	ldr	r2, [pc, #296]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x19a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a49      	ldr	r2, [pc, #292]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x196>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a48      	ldr	r2, [pc, #288]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x192>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x1a0>
 80015f2:	2300      	movs	r3, #0
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	f002 0203 	and.w	r2, r2, #3
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001604:	493a      	ldr	r1, [pc, #232]	; (80016f0 <HAL_GPIO_Init+0x29c>)
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4938      	ldr	r1, [pc, #224]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	43db      	mvns	r3, r3
 8001634:	4933      	ldr	r1, [pc, #204]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001636:	4013      	ands	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001646:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	492e      	ldr	r1, [pc, #184]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
 8001652:	e006      	b.n	8001662 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	43db      	mvns	r3, r3
 800165c:	4929      	ldr	r1, [pc, #164]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800165e:	4013      	ands	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	4924      	ldr	r1, [pc, #144]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
 800167a:	e006      	b.n	800168a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	491f      	ldr	r1, [pc, #124]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001686:	4013      	ands	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	491a      	ldr	r1, [pc, #104]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
 80016a2:	e006      	b.n	80016b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4915      	ldr	r1, [pc, #84]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f aed0 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	372c      	adds	r7, #44	; 0x2c
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	10210000 	.word	0x10210000
 80016d8:	10110000 	.word	0x10110000
 80016dc:	10120000 	.word	0x10120000
 80016e0:	10310000 	.word	0x10310000
 80016e4:	10320000 	.word	0x10320000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e001      	b.n	800172a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001746:	787b      	ldrb	r3, [r7, #1]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174c:	887a      	ldrh	r2, [r7, #2]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001752:	e003      	b.n	800175c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	041a      	lsls	r2, r3, #16
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	611a      	str	r2, [r3, #16]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e26c      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b04      	cmp	r3, #4
 8001792:	d00c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001794:	4b8f      	ldr	r3, [pc, #572]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d10b      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06c      	beq.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d168      	bne.n	8001894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e246      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	4b80      	ldr	r3, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7f      	ldr	r2, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e02e      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7a      	ldr	r2, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a77      	ldr	r2, [pc, #476]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xbc>
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a71      	ldr	r2, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001824:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fcf6 	bl	8001234 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fcf2 	bl	8001234 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1fa      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xe4>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fce2 	bl	8001234 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff fcde 	bl	8001234 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1e6      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1ba      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4939      	ldr	r1, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fc97 	bl	8001234 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fc93 	bl	8001234 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e19b      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fc76 	bl	8001234 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fc72 	bl	8001234 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e17a      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03a      	beq.n	80019ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fc56 	bl	8001234 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff fc52 	bl	8001234 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e15a      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f000 faa8 	bl	8001f00 <RCC_Delay>
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff fc3c 	bl	8001234 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff fc38 	bl	8001234 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e140      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	42420000 	.word	0x42420000
 80019dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b9e      	ldr	r3, [pc, #632]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a6 	beq.w	8001b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b97      	ldr	r3, [pc, #604]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a93      	ldr	r2, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a8a      	ldr	r2, [pc, #552]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fbf9 	bl	8001234 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7ff fbf5 	bl	8001234 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0fd      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x312>
 8001a6c:	4b7b      	ldr	r3, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a7a      	ldr	r2, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001a82:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x356>
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a6c      	ldr	r2, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a69      	ldr	r2, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a66      	ldr	r2, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a63      	ldr	r2, [pc, #396]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fba9 	bl	8001234 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fba5 	bl	8001234 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0ab      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x37e>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fb93 	bl	8001234 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fb8f 	bl	8001234 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e095      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8081 	beq.w	8001c52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d061      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d146      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fb63 	bl	8001234 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fb5f 	bl	8001234 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e067      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	492d      	ldr	r1, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a19      	ldr	r1, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	4927      	ldr	r1, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fb33 	bl	8001234 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fb2f 	bl	8001234 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e037      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46a>
 8001bf0:	e02f      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCC_OscConfig+0x4fc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fb1c 	bl	8001234 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff fb18 	bl	8001234 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e020      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x498>
 8001c1e:	e018      	b.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e013      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	42420060 	.word	0x42420060

08001c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d0      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d910      	bls.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4965      	ldr	r1, [pc, #404]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b8      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc4:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cdc:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce8:	4b50      	ldr	r3, [pc, #320]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	494d      	ldr	r1, [pc, #308]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d040      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d115      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e07f      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e073      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4936      	ldr	r1, [pc, #216]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7ff fa6c 	bl	8001234 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff fa68 	bl	8001234 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e053      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d210      	bcs.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4922      	ldr	r1, [pc, #136]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e032      	b.n	8001e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4916      	ldr	r1, [pc, #88]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d009      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	490e      	ldr	r1, [pc, #56]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001df6:	f000 f821 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_RCC_ClockConfig+0x1cc>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f9ca 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	08003c1c 	.word	0x08003c1c
 8001e34:	20000014 	.word	0x20000014
 8001e38:	20000018 	.word	0x20000018

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b490      	push	{r4, r7}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e44:	1d3c      	adds	r4, r7, #4
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x40>
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7a:	e02d      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e7e:	623b      	str	r3, [r7, #32]
      break;
 8001e80:	e02d      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	0c9b      	lsrs	r3, r3, #18
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e8e:	4413      	add	r3, r2
 8001e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c5b      	lsrs	r3, r3, #17
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eba:	fb02 f203 	mul.w	r2, r2, r3
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	e004      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	623b      	str	r3, [r7, #32]
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc90      	pop	{r4, r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	080026c8 	.word	0x080026c8
 8001ef0:	080026d8 	.word	0x080026d8
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	007a1200 	.word	0x007a1200
 8001efc:	003d0900 	.word	0x003d0900

08001f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <RCC_Delay+0x34>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <RCC_Delay+0x38>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0a5b      	lsrs	r3, r3, #9
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f1c:	bf00      	nop
  }
  while (Delay --);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	60fa      	str	r2, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f9      	bne.n	8001f1c <RCC_Delay+0x1c>
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000014 	.word	0x20000014
 8001f38:	10624dd3 	.word	0x10624dd3

08001f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e076      	b.n	800203c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d108      	bne.n	8001f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f5e:	d009      	beq.n	8001f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
 8001f66:	e005      	b.n	8001f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff f824 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	ea42 0103 	orr.w	r1, r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	0c1a      	lsrs	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f002 0204 	and.w	r2, r2, #4
 800201a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_SPI_Transmit+0x22>
 8002062:	2302      	movs	r3, #2
 8002064:	e126      	b.n	80022b4 <HAL_SPI_Transmit+0x270>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800206e:	f7ff f8e1 	bl	8001234 <HAL_GetTick>
 8002072:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d002      	beq.n	800208a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002088:	e10b      	b.n	80022a2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_SPI_Transmit+0x52>
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800209a:	e102      	b.n	80022a2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	88fa      	ldrh	r2, [r7, #6]
 80020ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e2:	d10f      	bne.n	8002104 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b40      	cmp	r3, #64	; 0x40
 8002110:	d007      	beq.n	8002122 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212a:	d14b      	bne.n	80021c4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_Transmit+0xf6>
 8002134:	8afb      	ldrh	r3, [r7, #22]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d13e      	bne.n	80021b8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	1c9a      	adds	r2, r3, #2
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800215e:	e02b      	b.n	80021b8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d112      	bne.n	8002194 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	1c9a      	adds	r2, r3, #2
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	86da      	strh	r2, [r3, #54]	; 0x36
 8002192:	e011      	b.n	80021b8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002194:	f7ff f84e 	bl	8001234 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d803      	bhi.n	80021ac <HAL_SPI_Transmit+0x168>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d102      	bne.n	80021b2 <HAL_SPI_Transmit+0x16e>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021b6:	e074      	b.n	80022a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ce      	bne.n	8002160 <HAL_SPI_Transmit+0x11c>
 80021c2:	e04c      	b.n	800225e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_SPI_Transmit+0x18e>
 80021cc:	8afb      	ldrh	r3, [r7, #22]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d140      	bne.n	8002254 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	330c      	adds	r3, #12
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021f8:	e02c      	b.n	8002254 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d113      	bne.n	8002230 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	330c      	adds	r3, #12
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	86da      	strh	r2, [r3, #54]	; 0x36
 800222e:	e011      	b.n	8002254 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002230:	f7ff f800 	bl	8001234 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d803      	bhi.n	8002248 <HAL_SPI_Transmit+0x204>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002246:	d102      	bne.n	800224e <HAL_SPI_Transmit+0x20a>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002252:	e026      	b.n	80022a2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1cd      	bne.n	80021fa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f8b2 	bl	80023cc <SPI_EndRxTxTransaction>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	77fb      	strb	r3, [r7, #31]
 800229e:	e000      	b.n	80022a2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80022a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022cc:	f7fe ffb2 	bl	8001234 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022dc:	f7fe ffaa 	bl	8001234 <HAL_GetTick>
 80022e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	0d1b      	lsrs	r3, r3, #20
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	fb02 f303 	mul.w	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022f2:	e054      	b.n	800239e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d050      	beq.n	800239e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022fc:	f7fe ff9a 	bl	8001234 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	429a      	cmp	r2, r3
 800230a:	d902      	bls.n	8002312 <SPI_WaitFlagStateUntilTimeout+0x56>
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d13d      	bne.n	800238e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002320:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232a:	d111      	bne.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x94>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002334:	d004      	beq.n	8002340 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233e:	d107      	bne.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d10f      	bne.n	800237a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e017      	b.n	80023be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3b01      	subs	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4013      	ands	r3, r2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d19b      	bne.n	80022f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000014 	.word	0x20000014

080023cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff ff6a 	bl	80022bc <SPI_WaitFlagStateUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e000      	b.n	8002400 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <__errno>:
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <__errno+0x8>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000020 	.word	0x20000020

08002414 <__libc_init_array>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	2500      	movs	r5, #0
 8002418:	4e0c      	ldr	r6, [pc, #48]	; (800244c <__libc_init_array+0x38>)
 800241a:	4c0d      	ldr	r4, [pc, #52]	; (8002450 <__libc_init_array+0x3c>)
 800241c:	1ba4      	subs	r4, r4, r6
 800241e:	10a4      	asrs	r4, r4, #2
 8002420:	42a5      	cmp	r5, r4
 8002422:	d109      	bne.n	8002438 <__libc_init_array+0x24>
 8002424:	f000 f8ea 	bl	80025fc <_init>
 8002428:	2500      	movs	r5, #0
 800242a:	4e0a      	ldr	r6, [pc, #40]	; (8002454 <__libc_init_array+0x40>)
 800242c:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <__libc_init_array+0x44>)
 800242e:	1ba4      	subs	r4, r4, r6
 8002430:	10a4      	asrs	r4, r4, #2
 8002432:	42a5      	cmp	r5, r4
 8002434:	d105      	bne.n	8002442 <__libc_init_array+0x2e>
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800243c:	4798      	blx	r3
 800243e:	3501      	adds	r5, #1
 8002440:	e7ee      	b.n	8002420 <__libc_init_array+0xc>
 8002442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002446:	4798      	blx	r3
 8002448:	3501      	adds	r5, #1
 800244a:	e7f2      	b.n	8002432 <__libc_init_array+0x1e>
 800244c:	08003c2c 	.word	0x08003c2c
 8002450:	08003c2c 	.word	0x08003c2c
 8002454:	08003c2c 	.word	0x08003c2c
 8002458:	08003c30 	.word	0x08003c30

0800245c <malloc>:
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <malloc+0xc>)
 800245e:	4601      	mov	r1, r0
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f000 b85f 	b.w	8002524 <_malloc_r>
 8002466:	bf00      	nop
 8002468:	20000020 	.word	0x20000020

0800246c <free>:
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <free+0xc>)
 800246e:	4601      	mov	r1, r0
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f000 b80b 	b.w	800248c <_free_r>
 8002476:	bf00      	nop
 8002478:	20000020 	.word	0x20000020

0800247c <memset>:
 800247c:	4603      	mov	r3, r0
 800247e:	4402      	add	r2, r0
 8002480:	4293      	cmp	r3, r2
 8002482:	d100      	bne.n	8002486 <memset+0xa>
 8002484:	4770      	bx	lr
 8002486:	f803 1b01 	strb.w	r1, [r3], #1
 800248a:	e7f9      	b.n	8002480 <memset+0x4>

0800248c <_free_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4605      	mov	r5, r0
 8002490:	2900      	cmp	r1, #0
 8002492:	d043      	beq.n	800251c <_free_r+0x90>
 8002494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002498:	1f0c      	subs	r4, r1, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfb8      	it	lt
 800249e:	18e4      	addlt	r4, r4, r3
 80024a0:	f000 f8aa 	bl	80025f8 <__malloc_lock>
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <_free_r+0x94>)
 80024a6:	6813      	ldr	r3, [r2, #0]
 80024a8:	4610      	mov	r0, r2
 80024aa:	b933      	cbnz	r3, 80024ba <_free_r+0x2e>
 80024ac:	6063      	str	r3, [r4, #4]
 80024ae:	6014      	str	r4, [r2, #0]
 80024b0:	4628      	mov	r0, r5
 80024b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024b6:	f000 b8a0 	b.w	80025fa <__malloc_unlock>
 80024ba:	42a3      	cmp	r3, r4
 80024bc:	d90b      	bls.n	80024d6 <_free_r+0x4a>
 80024be:	6821      	ldr	r1, [r4, #0]
 80024c0:	1862      	adds	r2, r4, r1
 80024c2:	4293      	cmp	r3, r2
 80024c4:	bf01      	itttt	eq
 80024c6:	681a      	ldreq	r2, [r3, #0]
 80024c8:	685b      	ldreq	r3, [r3, #4]
 80024ca:	1852      	addeq	r2, r2, r1
 80024cc:	6022      	streq	r2, [r4, #0]
 80024ce:	6063      	str	r3, [r4, #4]
 80024d0:	6004      	str	r4, [r0, #0]
 80024d2:	e7ed      	b.n	80024b0 <_free_r+0x24>
 80024d4:	4613      	mov	r3, r2
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	b10a      	cbz	r2, 80024de <_free_r+0x52>
 80024da:	42a2      	cmp	r2, r4
 80024dc:	d9fa      	bls.n	80024d4 <_free_r+0x48>
 80024de:	6819      	ldr	r1, [r3, #0]
 80024e0:	1858      	adds	r0, r3, r1
 80024e2:	42a0      	cmp	r0, r4
 80024e4:	d10b      	bne.n	80024fe <_free_r+0x72>
 80024e6:	6820      	ldr	r0, [r4, #0]
 80024e8:	4401      	add	r1, r0
 80024ea:	1858      	adds	r0, r3, r1
 80024ec:	4282      	cmp	r2, r0
 80024ee:	6019      	str	r1, [r3, #0]
 80024f0:	d1de      	bne.n	80024b0 <_free_r+0x24>
 80024f2:	6810      	ldr	r0, [r2, #0]
 80024f4:	6852      	ldr	r2, [r2, #4]
 80024f6:	4401      	add	r1, r0
 80024f8:	6019      	str	r1, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	e7d8      	b.n	80024b0 <_free_r+0x24>
 80024fe:	d902      	bls.n	8002506 <_free_r+0x7a>
 8002500:	230c      	movs	r3, #12
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	e7d4      	b.n	80024b0 <_free_r+0x24>
 8002506:	6820      	ldr	r0, [r4, #0]
 8002508:	1821      	adds	r1, r4, r0
 800250a:	428a      	cmp	r2, r1
 800250c:	bf01      	itttt	eq
 800250e:	6811      	ldreq	r1, [r2, #0]
 8002510:	6852      	ldreq	r2, [r2, #4]
 8002512:	1809      	addeq	r1, r1, r0
 8002514:	6021      	streq	r1, [r4, #0]
 8002516:	6062      	str	r2, [r4, #4]
 8002518:	605c      	str	r4, [r3, #4]
 800251a:	e7c9      	b.n	80024b0 <_free_r+0x24>
 800251c:	bd38      	pop	{r3, r4, r5, pc}
 800251e:	bf00      	nop
 8002520:	200000a4 	.word	0x200000a4

08002524 <_malloc_r>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	1ccd      	adds	r5, r1, #3
 8002528:	f025 0503 	bic.w	r5, r5, #3
 800252c:	3508      	adds	r5, #8
 800252e:	2d0c      	cmp	r5, #12
 8002530:	bf38      	it	cc
 8002532:	250c      	movcc	r5, #12
 8002534:	2d00      	cmp	r5, #0
 8002536:	4606      	mov	r6, r0
 8002538:	db01      	blt.n	800253e <_malloc_r+0x1a>
 800253a:	42a9      	cmp	r1, r5
 800253c:	d903      	bls.n	8002546 <_malloc_r+0x22>
 800253e:	230c      	movs	r3, #12
 8002540:	6033      	str	r3, [r6, #0]
 8002542:	2000      	movs	r0, #0
 8002544:	bd70      	pop	{r4, r5, r6, pc}
 8002546:	f000 f857 	bl	80025f8 <__malloc_lock>
 800254a:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <_malloc_r+0xac>)
 800254c:	6814      	ldr	r4, [r2, #0]
 800254e:	4621      	mov	r1, r4
 8002550:	b991      	cbnz	r1, 8002578 <_malloc_r+0x54>
 8002552:	4c20      	ldr	r4, [pc, #128]	; (80025d4 <_malloc_r+0xb0>)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	b91b      	cbnz	r3, 8002560 <_malloc_r+0x3c>
 8002558:	4630      	mov	r0, r6
 800255a:	f000 f83d 	bl	80025d8 <_sbrk_r>
 800255e:	6020      	str	r0, [r4, #0]
 8002560:	4629      	mov	r1, r5
 8002562:	4630      	mov	r0, r6
 8002564:	f000 f838 	bl	80025d8 <_sbrk_r>
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d124      	bne.n	80025b6 <_malloc_r+0x92>
 800256c:	230c      	movs	r3, #12
 800256e:	4630      	mov	r0, r6
 8002570:	6033      	str	r3, [r6, #0]
 8002572:	f000 f842 	bl	80025fa <__malloc_unlock>
 8002576:	e7e4      	b.n	8002542 <_malloc_r+0x1e>
 8002578:	680b      	ldr	r3, [r1, #0]
 800257a:	1b5b      	subs	r3, r3, r5
 800257c:	d418      	bmi.n	80025b0 <_malloc_r+0x8c>
 800257e:	2b0b      	cmp	r3, #11
 8002580:	d90f      	bls.n	80025a2 <_malloc_r+0x7e>
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	18cc      	adds	r4, r1, r3
 8002586:	50cd      	str	r5, [r1, r3]
 8002588:	4630      	mov	r0, r6
 800258a:	f000 f836 	bl	80025fa <__malloc_unlock>
 800258e:	f104 000b 	add.w	r0, r4, #11
 8002592:	1d23      	adds	r3, r4, #4
 8002594:	f020 0007 	bic.w	r0, r0, #7
 8002598:	1ac3      	subs	r3, r0, r3
 800259a:	d0d3      	beq.n	8002544 <_malloc_r+0x20>
 800259c:	425a      	negs	r2, r3
 800259e:	50e2      	str	r2, [r4, r3]
 80025a0:	e7d0      	b.n	8002544 <_malloc_r+0x20>
 80025a2:	684b      	ldr	r3, [r1, #4]
 80025a4:	428c      	cmp	r4, r1
 80025a6:	bf16      	itet	ne
 80025a8:	6063      	strne	r3, [r4, #4]
 80025aa:	6013      	streq	r3, [r2, #0]
 80025ac:	460c      	movne	r4, r1
 80025ae:	e7eb      	b.n	8002588 <_malloc_r+0x64>
 80025b0:	460c      	mov	r4, r1
 80025b2:	6849      	ldr	r1, [r1, #4]
 80025b4:	e7cc      	b.n	8002550 <_malloc_r+0x2c>
 80025b6:	1cc4      	adds	r4, r0, #3
 80025b8:	f024 0403 	bic.w	r4, r4, #3
 80025bc:	42a0      	cmp	r0, r4
 80025be:	d005      	beq.n	80025cc <_malloc_r+0xa8>
 80025c0:	1a21      	subs	r1, r4, r0
 80025c2:	4630      	mov	r0, r6
 80025c4:	f000 f808 	bl	80025d8 <_sbrk_r>
 80025c8:	3001      	adds	r0, #1
 80025ca:	d0cf      	beq.n	800256c <_malloc_r+0x48>
 80025cc:	6025      	str	r5, [r4, #0]
 80025ce:	e7db      	b.n	8002588 <_malloc_r+0x64>
 80025d0:	200000a4 	.word	0x200000a4
 80025d4:	200000a8 	.word	0x200000a8

080025d8 <_sbrk_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	2300      	movs	r3, #0
 80025dc:	4c05      	ldr	r4, [pc, #20]	; (80025f4 <_sbrk_r+0x1c>)
 80025de:	4605      	mov	r5, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	6023      	str	r3, [r4, #0]
 80025e4:	f7fe fd6c 	bl	80010c0 <_sbrk>
 80025e8:	1c43      	adds	r3, r0, #1
 80025ea:	d102      	bne.n	80025f2 <_sbrk_r+0x1a>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	b103      	cbz	r3, 80025f2 <_sbrk_r+0x1a>
 80025f0:	602b      	str	r3, [r5, #0]
 80025f2:	bd38      	pop	{r3, r4, r5, pc}
 80025f4:	20000198 	.word	0x20000198

080025f8 <__malloc_lock>:
 80025f8:	4770      	bx	lr

080025fa <__malloc_unlock>:
 80025fa:	4770      	bx	lr

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
